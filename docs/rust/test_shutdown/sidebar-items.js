window.SIDEBAR_ITEMS = {"fn":[["check_shutdown_call",""],["get_tests",""],["main",""],["read_all","Read from the fd until an EOF."],["read_once","A wrapper for libc::read() which uses a slice."],["setup_dgram_sockets","Generate a pair of connected UDP sockets."],["setup_stream_sockets","Generate a pair of connected TCP sockets."],["test_after_close","Test shutdown() after closing the socket."],["test_arguments","Test shutdown() with different arguments, making sure that the return value is expected."],["test_conn_reset","Test a certain case where we receive ECONNRESET when reading after shutdown()."],["test_invalid_fd","Test shutdown() using an argument that cannot be a fd."],["test_invalid_how","Test shutdown() using a valid socket, but invalid `how` argument."],["test_non_existent_fd","Test shutdown() using an argument that could be a fd, but is not."],["test_non_socket_fd","Test shutdown() using a valid fd that is not a socket."],["test_not_connected","Test shutdown() using a non-connected socket."],["test_read_after_client_shutdown","Test reading from the socket after shutdown()."],["test_read_after_peer_shutdown","Test reading from the socket after shutdown() on the peer."],["test_tcp_fin_correctness","Test that the FIN is not sent until the buffer is cleared after shutdown() on both sockets."],["test_twice","Test calling shutdown() twice with the same arguments."],["test_write_after_client_shutdown","Test writing to the socket after shutdown()."],["test_write_after_peer_shutdown","Test writing to the socket after shutdown() on the peer."],["write_all","Write all bytes in the buffer."],["write_once","A wrapper for libc::write() which uses a slice."]],"struct":[["ShutdownArguments",""]]};