initSidebarItems({"fn":[["check_connect_call",""],["get_tests",""],["main",""],["test_af_unspec",""],["test_af_unspec_after_connect",""],["test_after_close","Test connect() after closing the socket."],["test_connect_when_server_queue_full","Test connect() when the server queue is full, and for blocking sockets that an accept() unblocks a blocked connect()."],["test_double_connect","Test connect() to a server twice, optionally changing the address."],["test_interface","Test connect() to a server listening on the given interface (optionally overriding the interface the client connects on)."],["test_invalid_fd","Test connect() using an argument that cannot be a fd."],["test_non_existent_fd","Test connect() using an argument that could be a fd, but is not."],["test_non_existent_path","Test connect() to a path that doesn’t exist."],["test_non_existent_server","Test connect() to an address that doesn’t exist."],["test_non_socket_fd","Test connect() using a valid fd that is not a socket."],["test_null_addr","Test connect() using a valid fd, but with a NULL address."],["test_port_zero","Test connect() to an address with port 0."],["test_server_close_during_blocking_connect","Test that a blocking connect() returns when the server socket is closed."],["test_short_len","Test connect() using a valid fd and address, but an address length that is too low."],["test_zero_len","Test connect() using a valid fd and address, but an address length that is zero."]],"struct":[["ConnectArguments",""]]});