initSidebarItems({"fn":[["compatdescriptor_asLegacy","If the compat descriptor is a legacy descriptor, returns a pointer to the legacy descriptor object. Otherwise returns NULL. The legacy descriptor’s ref count is not modified, so the pointer must not outlive the lifetime of the compat descriptor."],["compatdescriptor_borrowPosixFile","If the compat descriptor is a new descriptor, returns a pointer to the reference-counted posix file object. Otherwise returns NULL. The posix file object’s ref count is not modified, so the pointer must not outlive the lifetime of the compat descriptor."],["compatdescriptor_free","When the compat descriptor is freed/dropped, it will decrement the legacy descriptor’s ref count."],["compatdescriptor_fromLegacy","The new compat descriptor takes ownership of the reference to the legacy descriptor and does not increment its ref count, but will decrement the ref count when this compat descriptor is freed/dropped."],["compatdescriptor_newRefPosixFile","If the compat descriptor is a new descriptor, returns a pointer to the reference-counted posix file object. Otherwise returns NULL. The posix file object’s ref count is incremented, so the pointer must always later be passed to `posixfile_drop()`, otherwise the memory will leak."],["posixfile_addListener","Add a status listener to the posix file object. This will increment the status listener’s ref count, and will decrement the ref count when this status listener is removed or when the posix file is freed/dropped."],["posixfile_drop","Decrement the ref count of the posix file object. The pointer must not be used after calling this function."],["posixfile_getCanonicalHandle","Get the canonical handle for a posix file object. Two posix file objects refer to the same underlying data if their handles are equal."],["posixfile_getStatus","Get the status of the posix file object."],["posixfile_removeListener","Remove a listener from the posix file object."]]});