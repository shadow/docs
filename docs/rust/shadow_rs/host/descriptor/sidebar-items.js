initSidebarItems({"enum":[["CompatDescriptor",""],["GenericFile","A wrapper for any type of file object."],["GenericFileRef",""],["GenericFileRefMut",""],["StateListenerFilter",""]],"mod":[["descriptor_table",""],["eventfd",""],["pipe",""],["shared_buf",""],["socket",""]],"struct":[["Descriptor","A file descriptor that reference an open file. Also contains flags that change the behaviour of this file descriptor."],["DescriptorFlags","Flags for a file descriptor."],["FileMode","These are flags that should generally not change (analagous to the Linux `filp->f_mode`). Since the plugin will never see these values and they’re not exposed by the kernel, we don’t match the kernel `FMODE_` values here."],["FileState",""],["FileStatus","These are flags that can potentially be changed from the plugin (analagous to the Linux `filp->f_flags` status flags). Not all `O_` flags are valid here. For example file access mode flags (ex: `O_RDWR`) are stored elsewhere, and file creation flags (ex: `O_CREAT`) are not stored anywhere. Many of these can be represented in different ways, for example: `O_NONBLOCK`, `SOCK_NONBLOCK`, `EFD_NONBLOCK`, `GRND_NONBLOCK`, etc, and not all have the same value."],["OpenFile","Represents a POSIX file description, or a Linux `struct file`. An `OpenFile` wraps a reference to a `GenericFile`. Once there are no more `OpenFile` objects for a given `GenericFile`, the `GenericFile` will be closed. Typically this means that holding an `OpenFile` will ensure that the file remains open (the file’s status will not become `FileStatus::CLOSED`), but the underlying file may close itself in extenuating circumstances (for example if the file has an internal error)."],["OwnedLegacyDescriptor","Represents an owned reference to a legacy descriptor object. Will decrement the descriptor’s ref count when dropped."]]});