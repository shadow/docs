initSidebarItems({"enum":[["CompatDescriptor",""],["NewStatusListenerFilter",""],["PosixFile","Represents a POSIX description, or a Linux “struct file”."],["PosixFileRef",""],["PosixFileRefMut",""]],"mod":[["descriptor_table",""],["export",""],["pipe",""]],"struct":[["Descriptor",""],["DescriptorFlags",""],["FileFlags","These are flags that can potentially be changed from the plugin (analagous to the Linux `filp->f_flags` status flags). Not all `O_` flags are valid here. For example file access mode flags (ex: `O_RDWR`) are stored elsewhere, and file creation flags (ex: `O_CREAT`) are not stored anywhere. Many of these can be represented in different ways, for example: `O_NONBLOCK`, `SOCK_NONBLOCK`, `EFD_NONBLOCK`, `GRND_NONBLOCK`, etc, and not all have the same value."],["FileMode","These are flags that should generally not change (analagous to the Linux `filp->f_mode`). Since the plugin will never see these values and they’re not exposed by the kernel, we don’t match the kernel `FMODE_` values here."],["FileStatus",""],["LegacyListenerHelper","Stores event listener handles so that `c::StatusListener` objects can subscribe to events."],["LegacyStatusListener","A wrapper for a `*mut c::StatusListener` that increments its ref count when created, and decrements when dropped."],["OwnedLegacyDescriptor","Represents an owned reference to a legacy descriptor. Will decrement the descriptor’s ref count when dropped."],["StatusEventSource","A specified event source that passes a status and the changed bits to the function, but only if the monitored bits have changed and if the change the filter is satisfied."]],"trait":[["IsSend","A trait we can use as a compile-time check to make sure that an object is Send."],["IsSync","A trait we can use as a compile-time check to make sure that an object is Sync."]]});