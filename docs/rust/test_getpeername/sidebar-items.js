initSidebarItems({"fn":[["check_getpeername_call",""],["compare_sockname_peername","Run getsockname on one fd and getpeername on another fd, and make sure they match."],["get_tests",""],["inet_sockaddr_check_equal",""],["main",""],["test_after_close","Test getpeername after closing the socket."],["test_bound_socket","Test getpeername using a bound socket."],["test_connected_before_accepted","Test getpeername on a socket that has connected but not yet been accepted."],["test_connected_dgram_socket","Test getpeername using a datagram socket “connected” to a non-existent address."],["test_connected_socket","Test getpeername using a socket connected on loopback."],["test_invalid_fd","Test getpeername using an argument that cannot be a fd."],["test_listening_socket","Test getpeername on a listening socket."],["test_non_connected_fd","Test getpeername using a valid fd, but that is not connected to a peer."],["test_non_existent_fd","Test getpeername using an argument that could be a fd, but is not."],["test_non_socket_fd","Test getpeername using a valid fd that is not a socket."],["test_null_addr","Test getpeername using a valid fd, but with a NULL address."],["test_null_len","Test getpeername using a valid fd and address, a NULL address length."],["test_peer_socket","Test getpeername using the peer’s socket (the accepted socket for connection-based sockets)."],["test_short_len_inet","Test getpeername using a valid TCP socket and address, but an address length that is too small."],["test_sockname_peername","Test that getpeername and getsockname return the same results for connection-oriented sockets."],["test_unbound_socket","Test getpeername using an unbound socket."],["test_zero_len","Test getpeername using a valid fd and address, but an address length of 0."]],"struct":[["GetpeernameArguments",""]]});