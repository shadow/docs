initSidebarItems({"macro":[["flattened_maybe","Support deserializing from flattened and non-flattened representation"],["serde_conv","Create new conversion adapters from functions"],["with_prefix","Serialize with an added prefix on every field name and deserialize by trimming away the prefix."]],"mod":[["de","Module for [`DeserializeAs`][] implementations"],["formats","Specify the format and how lenient the deserialization is"],["rust","De/Serialization for Rustâ€™s builtin and std types"],["ser","Module for [`SerializeAs`][] implementations"]],"struct":[["As","Adapter to convert from `serde_as` to the serde traits."],["BoolFromInt","Deserialize a boolean from a number"],["BorrowCow","Borrow `Cow` data during deserialization when possible."],["Bytes","Optimized handling of owned and borrowed byte representations."],["BytesOrString","Deserialize from bytes or string"],["DefaultOnError","Deserialize value and return [`Default`] on error"],["DefaultOnNull","Deserialize [`Default`] from `null` values"],["DisplayFromStr","De/Serialize using `Display` and `FromStr` implementation"],["DurationMicroSeconds","Equivalent to [`DurationSeconds`] with micro-seconds as base unit."],["DurationMicroSecondsWithFrac","Equivalent to [`DurationSecondsWithFrac`] with micro-seconds as base unit."],["DurationMilliSeconds","Equivalent to [`DurationSeconds`] with milli-seconds as base unit."],["DurationMilliSecondsWithFrac","Equivalent to [`DurationSecondsWithFrac`] with milli-seconds as base unit."],["DurationNanoSeconds","Equivalent to [`DurationSeconds`] with nano-seconds as base unit."],["DurationNanoSecondsWithFrac","Equivalent to [`DurationSecondsWithFrac`] with nano-seconds as base unit."],["DurationSeconds","De/Serialize Durations as number of seconds."],["DurationSecondsWithFrac","De/Serialize Durations as number of seconds."],["EnumMap","Represent a list of enum values as a map."],["FromInto","Serialize value by converting to/from a proxy type with serde support."],["NoneAsEmptyString","De/Serialize a [`Option<String>`] type while transforming the empty string to [`None`]"],["OneOrMany","Deserialize one or many elements"],["PickFirst","Try multiple deserialization options until one succeeds."],["Same","Adapter to convert from `serde_as` to the serde traits."],["StringWithSeparator","De/Serialize a delimited collection using `Display` and `FromStr` implementation"],["TimestampMicroSeconds","Equivalent to [`TimestampSeconds`] with micro-seconds as base unit."],["TimestampMicroSecondsWithFrac","Equivalent to [`TimestampSecondsWithFrac`] with micro-seconds as base unit."],["TimestampMilliSeconds","Equivalent to [`TimestampSeconds`] with milli-seconds as base unit."],["TimestampMilliSecondsWithFrac","Equivalent to [`TimestampSecondsWithFrac`] with milli-seconds as base unit."],["TimestampNanoSeconds","Equivalent to [`TimestampSeconds`] with nano-seconds as base unit."],["TimestampNanoSecondsWithFrac","Equivalent to [`TimestampSecondsWithFrac`] with nano-seconds as base unit."],["TimestampSeconds","De/Serialize timestamps as seconds since the UNIX epoch"],["TimestampSecondsWithFrac","De/Serialize timestamps as seconds since the UNIX epoch"],["TryFromInto","Serialize value by converting to/from a proxy type with serde support."],["VecSkipError","Deserialize a sequence into `Vec<T>`, skipping elements which fail to deserialize."]],"trait":[["DeserializeAs","A data structure that can be deserialized from any data format supported by Serde, analogue to [`Deserialize`]."],["SerializeAs","A data structure that can be serialized into any data format supported by Serde, analogue to [`Serialize`]."]]});