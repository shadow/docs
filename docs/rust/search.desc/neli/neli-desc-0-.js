searchState.loadedDescShard("neli", 0, "neli: Type safety for netlink\nA <code>u64</code> data type that will always be serialized as big …\nA trait defining how to convert from a byte buffer to a …\nDerives the neli <code>FromBytes</code> trait for a struct.\nTakes an arbitrary input which serves as additional …\nDerives the neli <code>FromBytesWithInput</code> trait for a struct.\nTakes an arbitrary input which serves as additional …\nDefined for data structures that contain a header.\nDerives the neli <code>Header</code> trait for a struct or enum. Unlike …\nThe type of the additional input.\nThe type of the additional input.\nA trait defining methods that apply to all netlink data …\nDerives the neli <code>Size</code> trait for a struct or enum.\nA trait defining a netlink data structure’s conversion to\nDerives the neli <code>ToBytes</code> trait for a struct or enum.\nA trait defining methods that apply to constant-sized data …\nAs native endian <code>u64</code>\nShared attribute code for all types of netlink attributes.\nConnector module for Linux Netlink connector messages.\nHigh level notes\nThis is the module that contains the error types used in …\nReturns the argument unchanged.\nTakes a byte buffer and returns the deserialized data …\nTakes a byte buffer and an additional input and returns …\nTakes a byte buffer and an additional input and returns …\nThis module contains generic netlink parsing data …\nReturn the size in bytes of the data structure header.\nImplement a container for bit flag enums using the <code>bitflags</code>…\nFor generating a marker trait that flags a new enum as …\nCalls <code>U::from(self)</code>.\nModule for iteration over netlink responses\nConverts an enum from the form:\nCreate a big endian <code>u64</code> type from a native endian <code>u64</code>\nThis module contains the top level netlink header code. …\nPad a netlink message to the appropriate alignment.\nGet the size of the payload and align it to the required …\nHigh level API that performs sequence and PID checking as …\nThis module provides an implementation of routing netlink …\nThis module provides code that glues all of the other …\nStrip padding from a netlink message.\nStrip padding from a netlink message.\nStrip padding from a netlink message.\nTakes a byte buffer and serializes the data structure into …\nGet the size of a constant-sized data type.\nModule containing various types used across the various …\nSize of the unpadded data structure. This will usually …\nA module containing utilities for working with constructs …\nHandle returned for traversing nested attribute structures\nTrait that defines shared operations for netlink …\nVector reference\nOwned vector\nReturns the argument unchanged.\nParse binary payload as a type that implements <code>FromBytes</code>.\nParse binary payload as a type that implements <code>FromBytes</code>.\nParse binary payload as a type that implements …\nParse binary payload as a type that implements …\nParse binary payload as a type that implements …\nParse binary payload as a type that implements …\nGet nested attributes from a parsed handle.\nGet nested attributes from a parsed handle\nGet the underlying owned value as a reference\nGet the payload of an attribute as a handle for parsing …\nGet the payload of an attribute as a handle for parsing …\nGet an <code>Nlattr</code> payload as the provided type parameter, <code>R</code>.\nGet an <code>Nlattr</code> payload as the provided type parameter, <code>R</code>.\nGet an <code>Nlattr</code> payload as the provided type parameter, <code>R</code>. …\nCalls <code>U::from(self)</code>.\nPass back iterator over attributes\nCreate new <code>AttrHandle</code>\nCreate new borrowed <code>AttrHandle</code>\nGet the payload of the given attribute.\nSet the payload to a data type that implements <code>ToBytes</code> - …\nAcknowledgement event, typically for PROC_EVENT_NONE.\nNetlink connector message header and payload.\nBuilder for <code>CnMsg</code>.\nError type for CnMsgBuilder\nComm event, triggered when a process changes its command …\nCoredump event, triggered when a process dumps core.\nExec event, triggered when a process calls exec().\nExit event, triggered when a process exits.\nFork event, triggered when a process forks.\nGID change event, triggered when a process changes its GID.\nErgonomic enum for process event data.\nHeader for process event messages.\nPtrace event, triggered when a process is traced.\nSID change event, triggered when a process changes its …\nUID change event, triggered when a process changes its UID.\nUninitialized field\nCustom validation error\nAcknowledgement number\nAcknowledgement number\nBuilds a new <code>CnMsg</code>.\nThe CPU on which the event occurred.\nThe process event data.\nFlags\nFlags\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex of the connector (idx)\nIndex of the connector (idx)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLength of the payload\nPayload of the netlink message\nPayload of the netlink message\nSequence number\nSequence number\nNanosecond timestamp of the event.\nValue (val)\nValue (val)\nChild process PID.\nChild process TGID.\nCommand name (null-terminated, max 16 bytes).\nEffective GID.\nError code (0 for success).\nEffective UID.\nExit code.\nExit signal.\nParent process PID.\nParent process PID.\nParent process PID.\nParent process TGID (thread group ID).\nParent process TGID.\nParent process TGID.\nProcess PID.\nProcess PID.\nProcess PID.\nProcess PID.\nProcess PID.\nProcess PID.\nProcess PID.\nProcess PID.\nProcess TGID.\nProcess TGID.\nProcess TGID.\nProcess TGID.\nProcess TGID.\nProcess TGID.\nProcess TGID.\nProcess TGID.\nReal GID.\nReal UID.\nTracer process PID.\nTracer process TGID.\nMax supported message length for netlink messages …\nReimplementation of alignto macro in C\nConstants related to netlink connector interface\nConstants related to generic netlink\nConstants related to netfilter netlink integration …\nConstants related to generic netlink top level headers\nConstants related to rtnetlink\nConstants related to netlink socket operations\nValues for <code>idx</code> in <code>CnMsg</code>.\nValues for <code>val</code> in <code>CnMsg</code>.\nProcess event operations.\nProcess event type as reported by the kernel connector.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nTrait marking constants valid for use in <code>Genlmsghdr</code> field, …\nValues for <code>nla_type</code> in <code>Nlattr</code>\nValues for <code>nla_type</code> in <code>Nlattr</code>\nValues for <code>cmd</code> in <code>Genlmsghdr</code>.\nType representing attribute list types as indices\nMarker trait for types usable in the <code>Nlattr</code> field, <code>nla_type</code>\nWrapper that is usable with all values in the <code>Nlattr</code> …\nConstant could not be parsed into a type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nParameters for the <code>NfLogCfg::Cmd</code>.\nWrapper that is valid anywhere that accepts a value …\nCommand value for the <code>NfLogCfg::Cmd</code>.\nCopy mode of the logged packets.\nMessages related to the netfilter netlink protocols.\nAttributes inside a netfilter log packet message.\nConfiguration attributes for netfilter logging.\nConstant could not be parsed into a type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nArbitrary subsystem specific cookie to be used - in the …\nValues for <code>nl_type</code> in <code>Nlmsghdr</code>\nError message string (string)\nTrait marking constants valid for use in <code>Nlmsghdr</code> field, …\nWrapper that is usable with all values in <code>Nlmsghdr</code> field, …\nValues for <code>nl_type</code> in <code>Nlmsghdr</code>\nOffset of the invalid attribute in the original message, …\nPolicy for a rejected attribute\nThis flag is required for all kernel requests\nConstant could not be parsed into a type\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInternet address families\nInterface types\nEnum usable with <code>Rtattr</code> field, <code>rta_type</code>. Values are …\nInterface address flags\nValues for <code>ifi_flags</code> in <code>Ifinfomsg</code>.\nEnum usable with <code>Rtattr</code> field, <code>rta_type</code>. Values are …\nEnum usable with <code>Rtattr</code> field, <code>rta_type</code>. Values are nested …\nEnum usable with <code>Rtattr</code> field, <code>rta_type</code>. Values specify …\nArp neighbor cache entry flags\nArp neighbor cache entry states\nGeneral address families for sockets\n<code>rtm_scope</code> The distance between destinations\n<code>rt_class_t</code> Reserved route table identifiers\nEnum usable with <code>Rtattr</code> field, <code>rta_type</code>. Values are …\nMarker trait for <code>Rtattr</code> field, <code>rta_type</code>.\nWrapper that is usable for all values in <code>Rtattr</code> field, …\nrtnetlink-related values for <code>nl_type</code> in <code>Nlmsghdr</code>.\n<code>rtm_flags</code> Flags for rtnetlink messages\n<code>rtm_type</code> The results of a lookup from a route table\n<code>rtm_protocol</code> The origins of routes that are defined in the …\nEnum usable with <code>Rtattr</code> field, <code>rta_type</code>. Values specify …\nConstant could not be parsed into a type\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGeneral address families for sockets\nFlags to be used in NlSocket calls.\nValues for <code>nl_family</code> in <code>NlSocket</code>\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nCheck whether a given method is an unrecognized constant …\nCheck whether a given method is an unrecognized constant …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA bad sequence number or PID was received.\nA channel has closed and message processing cannot …\nDeserialization error.\nA deserialization error.\nDeserialization error\nInvalid input parameter for <code>FromBytesWithInput</code>.\nerrno indicating what went wrong in an IO error.\nIO error.\nIO error.\nIO error\nArbitrary message\nVariant for <code>String</code>-based messages.\nAbitrary error message.\nAbitrary error message.\nArbitrary error message.\nStruct representing netlink packets containing errors\nAn error packet sent back by netlink.\nBuilder for <code>Nlmsgerr</code>.\nError type for NlmsgerrBuilder\nA special struct that represents the contents of an ACK …\nBuilder for <code>NlmsghdrAck</code>.\nError type for NlmsghdrAckBuilder\nA special struct that represents the contents of an error …\nBuilder for <code>NlmsghdrErr</code>.\nError type for NlmsghdrErrBuilder\nNo ack was received when <code>NlmF::Ack</code> was specified in the …\nSendable, clonable error that can be sent across channels …\nA serialization error.\nSerialization error\nError from socket infrastructure.\nGeneral netlink error\nAn ack was received when <code>NlmF::Ack</code> was not specified in the\nUninitialized field\nUninitialized field\nUninitialized field\n<code>String</code> or <code>str</code> UTF error.\nString UTF conversion error.\nString UTF conversion error.\nCustom validation error\nCustom validation error\nCustom validation error\nBuilds a new <code>NlmsghdrAck</code>.\nBuild <code>NlmsghdrErr</code>.\nBuilds a new <code>Nlmsgerr</code>.\nError code\nError code\nContains attributes representing the extended ACK\nContains attributes representing the extended ACK\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new arbitrary error message.\nCreate new error from a data type implementing <code>Display</code>\nCreate a new error with the given message as description.\nCreate new error from a type implementing <code>Display</code>\nConstruct a new error message.\nFlags indicating properties of the request or response\nFlags indicating properties of the request or response\nFlags indicating properties of the request or response\nFlags indicating properties of the request or response\nLength of the netlink message\nLength of the netlink message\nLength of the netlink message\nPayload of netlink message\nPayload of netlink message\nID of the netlink destination for requests and source for …\nID of the netlink destination for requests and source for …\nID of the netlink destination for requests and source for …\nID of the netlink destination for requests and source for …\nSequence number for netlink protocol\nSequence number for netlink protocol\nSequence number for netlink protocol\nSequence number for netlink protocol\nType of the netlink message\nType of the netlink message\nType of the netlink message\nType of the netlink message\nPacket header for request that failed\nPacket header for request that failed\nCreate a typed ACK from an ACK that can represent all …\nCreate a typed error from an error that can represent all …\nCreate a typed ACK from an ACK that can represent all …\nCreate a typed error from an error that can represent all …\nConvert to typed router error from a router error that can …\nThe infomation packed into <code>nla_type</code> field of <code>nlattr</code> for …\nBuilder for <code>AttrType</code>.\nError type for AttrTypeBuilder\nVector reference\nType representing a generic netlink attribute handle.\nStruct representing generic netlink header and payload\nBuilder for <code>Genlmsghdr</code>.\nError type for GenlmsghdrBuilder\nStruct representing netlink attributes and payloads\nBuilder for <code>Nlattr</code>.\nError type for NlattrBuilder\nStruct indicating that no user header is in the generic …\nOwned vector\nUninitialized field\nUninitialized field\nUninitialized field\nCustom validation error\nCustom validation error\nCustom validation error\nAttributes included in generic netlink message\nAttributes included in generic netlink message\nBuild a <code>Genlmsghdr</code>.\nBuilds a new <code>AttrType</code>.\nBuild <code>Nlattr</code>.\nBuild a <code>Genlmsghdr</code> with a required user header type.\nGeneric netlink message command\nGeneric netlink message command\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn an <code>AttrHandle</code> for attributes nested in the given …\nParse binary payload as a type that implements <code>FromBytes</code>.\nParse binary payload as a type that implements …\nParse binary payload as a type that implements …\nGet nested attributes from a parsed handle\nGet the payload of an attribute as a handle for parsing …\nUser specific header to send with netlink packet; defaults …\nUser specific header to send with netlink packet; defaults …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilder method to add a nested attribute to the end of the …\nLength of the attribute header and payload together\nIf true, the payload contains nested attributes.\nIf true, the payload contains nested attributes.\nIf true, the payload is in net work byte order.\nIf true, the payload is in net work byte order.\nPayload of the attribute - either parsed or a binary buffer\nPayload of the attribute - either parsed or a binary buffer\nEnum representing the type of the attribute payload\nEnum representing the type of the attribute payload\nType information for the netlink attribute\nType information for the netlink attribute\nVersion of generic netlink family protocol\nVersion of generic netlink family protocol\nIterator over a single buffer received from a <code>recv</code> call.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptional method for parsing messages of varied types in …\nRepresents an ACK returned by netlink.\nRepresents an ACK extracted from the DONE packet returned …\nIndicates an empty payload.\nRepresents an application level error returned by netlink.\nAn enum representing either the desired payload as …\nTop level netlink header and payload\nBuilder for <code>Nlmsghdr</code>.\nError type for NlmsghdrBuilder\nRepresents the requested payload.\nUninitialized field\nCustom validation error\nBuild <code>Nlmsghdr</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an error from the payload if it exists.\nGet the payload if there is one or return an error.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFlags indicating properties of the request or response\nFlags indicating properties of the request or response\nLength of the netlink message\nPayload of netlink message\nPayload of netlink message\nID of the netlink destination for requests and source for …\nID of the netlink destination for requests and source for …\nSequence number for netlink protocol\nSequence number for netlink protocol\nType of the netlink message\nType of the netlink message\nSet the payload for <code>Nlmsghdr</code> and handle the change in …\nConvert a typed payload from a payload that can represent …\nSet the payload for <code>Nlmsghdr</code> and handle the change in …\nSynchronous packet routing functionality.\nA high-level handle for sending messages and generating a …\nA handle for receiving and validating all messages that …\nJoin multicast groups for a socket.\nEquivalent of <code>socket</code> and <code>bind</code> calls.\nLeave multicast groups for a socket.\nIf <code>true</code> is passed in, enable extended ACKs for this …\nIf <code>true</code> is passed in, enable strict checking for this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn <code>true</code> if an extended ACK is enabled for this socket.\nReturn <code>true</code> if strict checking is enabled for this socket. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList joined groups for a socket.\nLook up netlink family and multicast group name by ID.\nImitates the <code>Iterator</code> API but allows parsing differently …\nGet the PID for the current socket.\nConvenience function for resolving a <code>str</code> containing the …\nConvenience function for resolving a <code>str</code> containing the …\nSend a message and return a handle for receiving responses …\nVector reference\nStruct representing interface address messages\nBuilder for <code>Ifaddrmsg</code>.\nError type for IfaddrmsgBuilder\nStruct representing interface information messages\nBuilder for <code>Ifinfomsg</code>.\nError type for IfinfomsgBuilder\nStruct representing ARP cache info\nBuilder for <code>NdaCacheinfo</code>.\nError type for NdaCacheinfoBuilder\nRepresents an ARP (neighbor table) entry\nBuilder for <code>Ndmsg</code>.\nError type for NdmsgBuilder\nOwned vector\nRepresents a routing netlink attribute handle.\nStruct representing route netlink attributes\nBuilder for <code>Rtattr</code>.\nError type for RtattrBuilder\nGeneral form of address family dependent message.  Used for\nBuilder for <code>Rtgenmsg</code>.\nError type for RtgenmsgBuilder\nRoute message\nBuilder for <code>Rtmsg</code>.\nError type for RtmsgBuilder\nMessage in response to queuing discipline operations\nBuilder for <code>Tcmsg</code>.\nError type for TcmsgBuilder\nUninitialized field\nUninitialized field\nUninitialized field\nUninitialized field\nUninitialized field\nUninitialized field\nUninitialized field\nUninitialized field\nCustom validation error\nCustom validation error\nCustom validation error\nCustom validation error\nCustom validation error\nCustom validation error\nCustom validation error\nCustom validation error\nBuilds a new <code>Ifinfomsg</code>.\nBuilds a new <code>Ifaddrmsg</code>.\nBuilds a new <code>Rtgenmsg</code>.\nBuilds a new <code>Rtmsg</code>.\nBuilds a new <code>Ndmsg</code>.\nBuilds a new <code>NdaCacheinfo</code>.\nBuilds a new <code>Tcmsg</code>.\nBuild an <code>Rtattr</code>.\nSet the link with the given index down (equivalent to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn an <code>AttrHandle</code> for attributes nested in the given …\nParse binary payload as a type that implements <code>FromBytes</code>.\nParse binary payload as a type that implements …\nParse binary payload as a type that implements …\nGet nested attributes from a parsed handle.\nGet the payload of an attribute as a handle for parsing …\nInterface address family\nInterface address family\nInterface address flags\nInterface address flags\nInterface address index\nInterface address index\nInterface address prefix length\nInterface address prefix length\nInterface address scope\nInterface address scope\nInterface change mask\nInterface change mask\nInterface address family\nInterface address family\nInterface flags\nInterface flags\nInterface index\nInterface index\nInterface type\nInterface type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfirmed\nConfirmed\nAddress family of entry\nAddress family of entry\nFlags for entry\nFlags for entry\nIndex of entry\nIndex of entry\nReference count\nReference count\nState of entry\nState of entry\nType of entry\nType of entry\nUpdated\nUpdated\nUsed\nUsed\nBuilder method to add a nested attribute to the end of the …\nLength of the attribute\nPayload of the attribute\nPayload of the attribute\nType of the attribute\nType of the attribute\nPayload of <code>Rtattr</code>s\nPayload of <code>Rtattr</code>s\nPayload of <code>Rtattr</code>s\nPayload of <code>Rtattr</code>s\nPayload of <code>Rtattr</code>s\nPayload of <code>Rtattr</code>s\nPayload of <code>Rtattr</code>s\nPayload of <code>Rtattr</code>s\nPayload of <code>Rtattr</code>s\nPayload of <code>Rtattr</code>s\nPayload of <code>Rtattr</code>s\nPayload of <code>Rtattr</code>s\nAddress family for the request\nAddress family for the request\nLength of destination\nLength of destination\nAddress family of route\nAddress family of route\nRouting flags\nRouting flags\nRouting protocol\nRouting protocol\nRouting scope\nRouting scope\nLength of source\nLength of source\nRouting table ID\nRouting table ID\nTOS filter\nTOS filter\nRouting type\nRouting type\nFamily\nFamily\nQueuing discipline handle\nQueuing discipline handle\nInterface index\nInterface index\nInfo\nInfo\nParent queuing discipline\nParent queuing discipline\nSet the link with the given index up (equivalent to …\nLow level access to a netlink socket.\nJoin multicast groups for a socket.\nUse this function to bind to a netlink ID and subscribe to …\nSet underlying socket file descriptor to be blocking.\nEquivalent of <code>socket</code> and <code>bind</code> calls.\nCloses underlying file descriptor to avoid file descriptor …\nLeave multicast groups for a socket.\nIf <code>true</code> is passed in, enable extended ACKs for this …\nIf <code>true</code> is passed in, enable strict checking for this …\nReturns the argument unchanged.\nReturn <code>true</code> if an extended ACK is enabled for this socket.\nReturn <code>true</code> if strict checking is enabled for this socket. …\nCalls <code>U::from(self)</code>.\nDetermines if underlying file descriptor is blocking.\nList joined groups for a socket.\nWrapper around <code>socket()</code> syscall filling in the …\nSet underlying socket file descriptor to be non blocking.\nGet the PID for this socket.\nReceive message encoded as byte slice from the netlink …\nSend message encoded as byte slice to the netlink ID …\nSet the size of the receive buffer for the socket.\nSynchronous socket operations\nHigher level handle for socket operations.\nJoin multicast groups for a socket.\nEquivalent of <code>socket</code> and <code>bind</code> calls.\nLeave multicast groups for a socket.\nIf <code>true</code> is passed in, enable extended ACKs for this …\nIf <code>true</code> is passed in, enable strict checking for this …\nReturns the argument unchanged.\nReturn <code>true</code> if an extended ACK is enabled for this socket.\nReturn <code>true</code> if strict checking is enabled for this socket. …\nCalls <code>U::from(self)</code>.\nList joined groups for a socket.\nGet the PID for the current socket.\nConvenience function to read a stream of <code>Nlmsghdr</code> structs …\nParse all <code>Nlmsghdr</code> structs sent in one network packet and …\nConvenience function to send an <code>Nlmsghdr</code> struct\nSet the size of the receive buffer for the socket.\nA buffer of bytes.\nA buffer of generic netlink attributes.\nA buffer of netlink messages.\nA buffer of rtnetlink attributes.\nExtend the given buffer with the contents of another slice.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a data structure with an immutable reference to the …\nGet a data structure with an immutable reference to the …\nConvert a <code>GenlBuffer</code> that can represent all types to a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the buffer is empty.\nReturns whether the number of elements in the buffer is 0.\nReturns whether the number of elements in the buffer is 0.\nReturns whether the number of elements in the buffer is 0.\nReturn an iterator over immutable references to the …\nReturn an iterator over immutable references to the …\nReturn an iterator over immutable references to the …\nReturn an iterator over mutable references to the elements …\nReturn an iterator over mutable references to the elements …\nReturn an iterator over mutable references to the elements …\nGet the current length of the buffer.\nReturns the number of elements in the buffer.\nReturns the number of elements in the buffer.\nReturns the number of elements in the buffer.\nCreate a new general purpose byte buffer.\nCreate a new buffer of netlink messages.\nCreate a new buffer of generic netlink attributes.\nCreate a new buffer of routing netlink attributes.\nGet a netlink message from the end of the buffer.\nGet a generic netlink attribute from the end of the buffer.\nGet a routing netlink attribute from the end of the buffer.\nAdd a new netlink message to the end of the buffer.\nAdd a new generic netlink attribute to the end of the …\nAdd a new routing netlink attribute to the end of the …\nStruct implementing handling of groups both as numerical …\nA bit array meant to be compatible with the bit array …\nAdd a new bitmask to the existing group set. Each bit …\nAdd a list of numerical groups values to the set of …\nReturn the set of groups as a bitmask. The representation …\nReturn the set of groups as a vector of group values.\nCreate an empty set of netlink multicast groups\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the set of groups as a vector of group values.\nReturns true if no group is set.\nReturns true if the <code>n</code>th bit is set. Not zero indexed.\nReturn the length in bytes for this bit array.\nReturn the number of bits that can be contained in this bit\nCreate a new bit array.\nCreate a new set of groups with a bitmask. Each bit …\nCreate a new set of groups from a list of numerical groups …\nRemove a bitmask from the existing group set. Each bit …\nRemove a list of numerical groups values from the set of …\nResize the underlying vector to have enough space for the …\nResize the underlying vector to have enough space for the …\nSet the <code>n</code>th bit. Not zero indexed.\nSynchronous (blocking) utils.\nGet a vector representation of all of the bit positions set\nA pool of buffers available for reading concurrent netlink …\nGuard indicating that a buffer has been acquired and the …\nAcquire a buffer for use.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReduce the size of the internal buffer to the number of …\nReset the buffer to the original size.")