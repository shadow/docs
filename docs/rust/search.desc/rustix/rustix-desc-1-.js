searchState.loadedDescShard("rustix", 1, "<code>getpriority(PRIO_PROCESS, pid)</code>—Get the scheduling …\n<code>getpriority(PRIO_USER, uid)</code>—Get the scheduling priority …\n<code>getrlimit(resource)</code>—Get a process resource limit value.\n<code>getsid(pid)</code>—Get the session ID of the given process.\n<code>getuid()</code>—Returns the process’ real user ID.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ioctl(fd, TIOCSCTTY, 0)</code>—Sets the controlling terminal …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nTest whether this pid represents the init process (pid 1).\nGet the <code>IO_FLUSHER</code> state of the caller.\nTest to see if a CPU is in the <code>CpuSet</code>.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\n<code>kill(0, sig)</code>—Sends a signal to all processes in the …\n<code>kill(pid, sig)</code>—Sends a signal to a process.\n<code>kill(-pid, sig)</code>—Sends a signal to all processes in a …\nReturns whether the process was terminated by a signal and …\nGet the current per-process machine check kill policy.\nMaximum, “hard”, value that <code>current</code> may be dynamically …\n<code>membarrier(cmd, 0, 0)</code>—Perform a memory barrier.\n<code>membarrier(cmd, MEMBARRIER_CMD_FLAG_CPU, cpu)</code>—Perform a …\n<code>membarrier(MEMBARRIER_CMD_QUERY, 0, 0)</code>—Query the …\nCreate a new and empty <code>CpuSet</code>.\n<code>nice(inc)</code>—Adjust the scheduling priority of the current …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGet the current value of the parent process death signal.\n<code>syscall(SYS_pidfd_getfd, pidfd, flags)</code>—Obtain a …\n<code>syscall(SYS_pidfd_open, pid, flags)</code>—Creates a file …\n<code>syscall(SYS_pidfd_send_signal, pidfd, sig, NULL, 0)</code>—Send …\n<code>pivot_root(new_root, put_old)</code>—Change the root mount.\n<code>prlimit(pid, resource, new)</code>—Get and set a process …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\n<code>sched_getaffinity(pid)</code>—Get a thread’s CPU affinity …\n<code>sched_getcpu()</code>—Get the CPU that the current thread is …\n<code>sched_setaffinity(pid, cpuset)</code>—Set a thread’s CPU …\n<code>sched_yield()</code>—Hints to the OS that other processes …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nAdd a CPU to <code>CpuSet</code>.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet a new auxiliary vector.\nSet the <code>child subreaper</code> attribute of the calling process.\nSet the state of the <code>dumpable</code> attribute.\nSet the endianness of the calling process.\nSupersede the <code>/proc/pid/exe</code> symbolic link with a new one …\nSet floating point emulation control bits.\nSet floating point exception mode.\nAllow control of the floating point mode from user space.\nSet the machine check memory corruption kill policy for …\nSet the parent-death signal of the calling process.\nDeclare that the ptracer process can <code>ptrace</code> the calling …\nSet the state of the flag determining if the timestamp …\nSet whether to use (normal, traditional) statistical …\nSet unaligned access control bits.\nModify certain kernel memory map descriptor addresses of …\nSet the name for a virtual memory region.\n<code>setpgid(pid, pgid)</code>—Sets the process group ID of the …\n<code>setpriority(PRIO_PGRP, pgid)</code>—Get the scheduling priority …\n<code>setpriority(PRIO_PROCESS, pid)</code>—Get the scheduling …\n<code>setpriority(PRIO_USER, uid)</code>—Get the scheduling priority …\n<code>setrlimit(resource, new)</code>—Set a process resource limit …\n<code>setsid()</code>—Create a new session.\nReturns whether the process was terminated by a signal.\nGet the state of the speculation misfeature.\n<code>brk</code> start address.\nCode section start address.\nData section start address.\nStack start address.\nReturns whether the process is currently stopped.\nReturns whether the process is currently stopped.\nReturns the number of the signal that stopped the process, …\nReturns the number of the signal that stopped the process, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the number of the signal that terminated the …\nReturns the number of the signal that terminated the …\n<code>kill(0, 0)</code>—Check validity of pid and permissions to send …\n<code>kill(pid, 0)</code>—Check validity of pid and permissions to …\n<code>kill(-pid, 0)</code>—Check validity of pid and permissions to …\nGet the state of the flag determining if the timestamp …\nGet which process timing method is currently in use.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns whether the process is currently trapped.\nReturns the number of the signal that trapped the process, …\n<code>umask(mask)</code>—Set the process file creation mask.\nGet unaligned access control bits.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRemove a CPU from <code>CpuSet</code>.\nGet the size of the <code>PrctlMmMap</code> the kernel expects.\n<code>wait(waitopts)</code>—Wait for any of the children of calling …\n<code>waitid(_, _, _, opts)</code>—Wait for the specified child …\n<code>waitpid(-pgid, waitopts)</code>—Wait for a process in a …\n<code>waitpid(pid, waitopts)</code>—Wait for a specific process to …\n<code>TC*</code> values for use with <code>tcflow</code>.\n<code>BRKINT</code>\n<code>BS0</code>\n<code>BS1</code>\n<code>BSDLY</code>\n<code>CLOCAL</code>\n<code>CMSPAR</code>\n<code>CR0</code>\n<code>CR1</code>\n<code>CR2</code>\n<code>CR3</code>\n<code>CRDLY</code>\n<code>CREAD</code>\n<code>CRTSCTS</code>\n<code>CS5</code>\n<code>CS6</code>\n<code>CS7</code>\n<code>CS8</code>\n<code>CSIZE</code>\n<code>CSTOPB</code>\nFlags controlling special terminal modes.\n<code>TCSADRAIN</code>—Make the change after all output has been …\n<code>ECHO</code>\n<code>ECHOCTL</code>\n<code>ECHOE</code>\n<code>ECHOK</code>\n<code>ECHOKE</code>\n<code>ECHONL</code>\n<code>ECHOPRT</code>\n<code>EXTPROC</code>\n<code>FF0</code>\n<code>FF1</code>\n<code>FFDLY</code>\n<code>FLUSHO</code>\n<code>TCSAFLUSH</code>—Discard any pending input and then make the …\n<code>HUPCL</code>\n<code>ICANON</code>—A flag for the <code>c_lflag</code> field of <code>Termios</code> indicating\n<code>ICRNL</code>\n<code>IEXTEN</code>\n<code>TCIFLUSH</code>—Flush data received but not read.\n<code>IGNBRK</code>\n<code>IGNCR</code>\n<code>IGNPAR</code>\n<code>IMAXBEL</code>\n<code>INLCR</code>\n<code>INPCK</code>\n<code>TCIOFLUSH</code>—<code>IFlush</code> and <code>OFlush</code> combined.\n<code>TCIOFF</code>—Transmits a STOP byte.\n<code>TCION</code>—Transmits a START byte.\n<code>ISIG</code>\n<code>ISTRIP</code>\n<code>IUCLC</code>\n<code>IUTF8</code>\n<code>IXANY</code>\n<code>IXOFF</code>\n<code>IXON</code>\nFlags controlling terminal input.\nFlags controlling “local” terminal modes.\n<code>NL0</code>\n<code>NL1</code>\n<code>NLDLY</code>\n<code>NOFLSH</code>\n<code>TCSANOW</code>—Make the change immediately.\n<code>OCRNL</code>\n<code>OFDEL</code>\n<code>OFILL</code>\n<code>TCOFLUSH</code>—Flush data written but not transmitted.\n<code>OLCUC</code>\n<code>ONLCR</code>\n<code>ONLRET</code>\n<code>ONOCR</code>\n<code>TCOOFF</code>—Suspend output.\n<code>TCOON</code>—Restart suspended output.\n<code>OPOST</code>\n<code>TCSA*</code> values for use with <code>tcsetattr</code>.\nFlags controlling terminal output.\n<code>PARENB</code>\n<code>PARMRK</code>\n<code>PARODD</code>\n<code>PENDIN</code>\n<code>pid_t</code>—A non-zero Unix process ID.\n<code>TC*</code> values for use with <code>tcflush</code>.\nIndices for use with <code>Termios::special_codes</code>.\nAn array indexed by <code>SpecialCodeIndex</code> indicating the …\n<code>TAB0</code>\n<code>TAB1</code>\n<code>TAB2</code>\n<code>TAB3</code>\n<code>TABDLY</code>\n<code>TOSTOP</code>\n<code>struct termios</code> for use with <code>tcgetattr</code> and <code>tcsetattr</code>.\n<code>VDISCARD</code>\n<code>VEOF</code>\n<code>VEOL</code>\n<code>VEOL2</code>\n<code>VERASE</code>\n<code>VINTR</code>\n<code>VKILL</code>\n<code>VLNEXT</code>\n<code>VMIN</code>\n<code>VQUIT</code>\n<code>VREPRINT</code>\n<code>VSTART</code>\n<code>VSTOP</code>\n<code>VSUSP</code>\n<code>VSWTC</code>\n<code>VT0</code>\n<code>VT1</code>\n<code>VTDLY</code>\n<code>VTIME</code>\n<code>VWERASE</code>\n<code>struct winsize</code> for use with <code>tcgetwinsize</code>.\n<code>XCASE</code>\n<code>XTABS</code>\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nLow-level configuration flags.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nHow is input interpreted?\nReturn the input communication speed.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ioctl(fd, TIOCEXCL)</code>—Enables exclusive mode on a terminal.\n<code>ioctl(fd, TIOCNXCL)</code>—Disables exclusive mode on a …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\n<code>isatty(fd)</code>—Tests whether a file descriptor refers to a …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nLine discipline.\nHigh-level configuration flags.\n<code>cfmakeraw(self)</code>—Set a <code>Termios</code> value to the settings for …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nHow is output translated?\nReturn the output communication speed.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the input communication speed.\nSet the output communication speed.\nSet the input and output communication speeds.\nHow are various special control codes handled?\nSpeeds for use with <code>Termios::set_input_speed</code> and …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>tcdrain(fd, duration)</code>—Wait until all pending output has …\n<code>tcflow(fd, action)</code>—Suspend or resume transmission or …\n<code>tcflush(fd, queue_selector)</code>—Wait until all pending …\n<code>tcgetattr(fd)</code>—Get terminal attributes.\n<code>tcgetpgrp(fd)</code>—Get the terminal foreground process group.\n<code>tcgetsid(fd)</code>—Return the session ID of the current …\n<code>tcgetwinsize(fd)</code>—Get the current terminal window size.\n<code>tcsendbreak(fd, 0)</code>—Transmit zero-valued bits.\n<code>tcsetattr(fd)</code>—Set terminal attributes.\n<code>tcsetpgrp(fd, pid)</code>—Set the terminal foreground process …\n<code>tcsetwinsize(fd)</code>—Set the current terminal window size.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>B0</code>\n<code>B1000000</code>\n<code>B110</code>\n<code>B115200</code>\n<code>B1152000</code>\n<code>B1200</code>\n<code>B134</code>\n<code>B150</code>\n<code>B1500000</code>\n<code>B1800</code>\n<code>B19200</code>\n<code>B200</code>\n<code>B2000000</code>\n<code>B230400</code>\n<code>B2400</code>\n<code>B2500000</code>\n<code>B300</code>\n<code>B3000000</code>\n<code>B3500000</code>\n<code>B38400</code>\n<code>B4000000</code>\n<code>B460800</code>\n<code>B4800</code>\n<code>B50</code>\n<code>B500000</code>\n<code>B57600</code>\n<code>B576000</code>\n<code>B600</code>\n<code>B75</code>\n<code>B921600</code>\n<code>B9600</code>\n<code>CAP_AUDIT_CONTROL</code>\n<code>CAP_AUDIT_READ</code>\n<code>CAP_AUDIT_WRITE</code>\nSystem calls are allowed to execute.\nAllow configuration of audit via unicast netlink socket.\nAllow reading the audit log via multicast netlink socket.\nAllow writing the audit log via unicast netlink socket.\n<code>CAP_BLOCK_SUSPEND</code>\n<code>CAP_BPF</code>\nThis capability allows the following BPF operations:\nSystem calls are blocked from executing.\nAllow preventing system suspends.\n<code>CLOCK_BOOTTIME</code>\n<code>CLOCK_BOOTTIME_ALARM</code>\n<code>CAP_CHECKPOINT_RESTORE</code>\n<code>CAP_CHOWN</code>\nControl group (CGroup) name space.\n<code>SECBIT_*</code>.\nLinux per-thread capability.\n<code>CAP_*</code> constants.\n<code>__user_cap_data_struct</code>\nIn a system with the <code>_POSIX_CHOWN_RESTRICTED</code> option …\nAllow checkpoint/restore related operations. Allow PID …\n<code>CLOCK_*</code> constants for use with <code>clock_gettime</code>.\n<code>FUTEX_CMP_REQUEUE</code>\nControl group (CGroup) name space.\n<code>PR_SCHED_CORE_SCOPE_*</code>.\nOverride all DAC access, including ACL execute access if …\nOverrides all DAC restrictions regarding read and search …\n<code>CAP_DAC_OVERRIDE</code>\n<code>CAP_DAC_READ_SEARCH</code>\nSecure computing is not in use.\nAddresses that are passed for the purpose of being …\nAn invalid time value was provided.\n<code>CLONE_FILES</code>.\n<code>CAP_FOWNER</code>\n<code>CLONE_FS</code>.\n<code>CAP_FSETID</code>\n<code>FUTEX_FD</code>\nOverrides all restrictions about allowed operations on …\nOverrides the following restrictions that the effective …\nUse user-supplied filter.\n<code>FUTEX_*</code> operations for use with the <code>futex</code> function.\n<code>gid_t</code>—A Unix group ID.\n<code>Host name</code> and <code>NIS domain name</code> (UTS) name space.\n<code>Host name</code> and <code>NIS domain name</code> (UTS) name space.\nInter-process communication (IPC) name space.\nAllow locking of shared memory segments. Allow mlock and …\nOverride IPC ownership checks.\n<code>CAP_IPC_LOCK</code>\n<code>CAP_IPC_OWNER</code>\nInter-process communication (IPC) name space.\nThe sleep was interrupted, the remaining time is returned.\nSetting this flag allows a thread that has one or more 0 …\nSet <code>KEEP_CAPS</code> irreversibly.\n<code>CAP_KILL</code>\nOverrides the restriction that the real or effective user …\n<code>CAP_LEASE</code>\n<code>CAP_LINUX_IMMUTABLE</code>\nAllow taking of leases on files.\nType of name space referred to by a link.\nAllow modification of <code>S_IMMUTABLE</code> and <code>S_APPEND</code> file …\n<code>FUTEX_LOCK_PI</code>\nAllow MAC configuration or state changes. The base kernel …\nOverride MAC access. The base kernel enforces no MAC …\n<code>CAP_MAC_ADMIN</code>\n<code>CAP_MAC_OVERRIDE</code>\n<code>CAP_MKNOD</code>\nMount name space.\nAllow the privileged aspects of <code>mknod</code>.\n<code>CLOCK_MONOTONIC</code>\n<code>CLOCK_MONOTONIC_COARSE</code>\n<code>CLOCK_MONOTONIC_RAW</code>\nMount name space.\nNetwork name space.\n<code>CAP_NET_ADMIN</code>\n<code>CAP_NET_BIND_SERVICE</code>\n<code>CAP_NET_BROADCAST</code>\n<code>CAP_NET_RAW</code>\n<code>CLONE_NEWCGROUP</code>.\n<code>CLONE_NEWIPC</code>.\n<code>CLONE_NEWNET</code>.\n<code>CLONE_NEWNS</code>.\n<code>CLONE_NEWPID</code>.\n<code>CLONE_NEWTIME</code>.\n<code>CLONE_NEWUSER</code>.\n<code>CLONE_NEWUTS</code>\nSetting this flag disallows raising ambient capabilities …\nSet <code>NO_CAP_AMBIENT_RAISE</code> irreversibly.\nIf this bit is set, then the kernel does not grant …\nSet <code>NO_ROOT</code> irreversibly.\nSetting this flag stops the kernel from adjusting the …\nSet <code>NO_SETUID_FIXUP</code> irreversibly.\nA return type for <code>nanosleep</code> and <code>clock_nanosleep_relative</code>.\nAllow interface configuration. Allow administration of IP …\nAllows binding to TCP/UDP sockets below 1024. Allows …\nAllow broadcasting, listen to multicast.\nAllow use of <code>RAW</code> sockets. Allow use of <code>PACKET</code> sockets. …\nNetwork name space.\nA type for the <code>tv_sec</code> field of <code>Timespec</code>.\nThe sleep completed normally.\n<code>CAP_PERFMON</code>\nProcess ID name space.\nAllow system performance and observability privileged …\n<code>pid_t</code>—A non-zero Unix process ID.\n<code>CLOCK_PROCESS_CPUTIME_ID</code>\nOperation will be performed for all processes in the …\nProcess ID name space.\nA group identifier as a raw integer.\nA process identifier as a raw integer.\nA user identifier as a raw integer.\n<code>CLOCK_REALTIME</code>\n<code>CLOCK_REALTIME_ALARM</code>\n<code>CLOCK_REALTIME_COARSE</code>\n<code>FUTEX_REQUEUE</code>\n<code>CAP_SETFCAP</code>\n<code>CAP_SETGID</code>\n<code>CAP_SETPCAP</code>\n<code>CAP_SETUID</code>\nScalable Vector Extension vector length configuration.\n<code>CAP_SYSLOG</code>\n<code>CLONE_SYSVSEM</code>.\n<code>CAP_SYS_ADMIN</code>\n<code>CAP_SYS_BOOT</code>\n<code>CAP_SYS_CHROOT</code>\n<code>CAP_SYS_MODULE</code>\n<code>CAP_SYS_NICE</code>\n<code>CAP_SYS_PACCT</code>\n<code>CAP_SYS_PTRACE</code>\n<code>CAP_SYS_RAWIO</code>\n<code>CAP_SYS_RESOURCE</code>\n<code>CAP_SYS_TIME</code>\n<code>CAP_SYS_TTY_CONFIG</code>\nA type for the <code>tv_sec</code> field of <code>Timespec</code>.\n<code>SECCOMP_MODE_*</code>.\nSet or remove capabilities on files. Map <code>uid=0</code> into a …\nAllows <code>setgid</code> manipulation. Allows <code>setgroups</code>. Allows …\nWithout VFS support for capabilities:\nAllows <code>set*uid</code> manipulation (including fsuid). Allows …\nUse hard-coded filter.\nValue of the fast switch flag controlling system calls …\nAllow configuration of the secure attention key. Allow …\nAllow use of <code>reboot</code>.\nAllow use of <code>chroot</code>.\nAllow configuring the kernel’s <code>syslog</code> (<code>printk</code> behaviour).\nInsert and remove kernel modules - modify kernel without …\nAllow raising priority and setting priority on other …\nAllow configuration of process accounting.\nAllow <code>ptrace</code> of any process.\nAllow ioperm/iopl access. Allow sending USB messages to …\nOverride resource limits. Set resource limits. Override …\nAllow configuration of tty devices. Allow <code>vhangup</code> of tty.\nAllow manipulation of system clock. Allow <code>irix_stime</code> on …\nAsynchronous tag check fault mode.\nSynchronous tag check fault mode.\nTime name space.\nZero means addresses that are passed for the purpose of …\nOperation will be performed for the thread.\n<code>CLOCK_THREAD_CPUTIME_ID</code>\nOperation will be performed for all tasks in the task …\nThread name space type.\nTime name space.\n<code>struct timespec</code>\n<code>FUTEX_TRYLOCK_PI</code>\nUser name space.\n<code>uid_t</code>—A Unix user ID.\n<code>FUTEX_UNLOCK_PI</code>\n<code>CLONE_*</code> for use with <code>unshare</code>.\nUser name space.\n<code>CAP_WAKE_ALARM</code>\n<code>FUTEX_WAIT</code>\n<code>FUTEX_WAIT_BITSET</code>\n<code>FUTEX_WAKE</code>\nAllow triggering something that will wake the system.\n<code>FUTEX_WAKE_OP</code>\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>capget(_LINUX_CAPABILITY_VERSION_3, pid)</code>\nGet the <code>securebits</code> flags of the calling thread.\nCheck if the specified capability is in the ambient set.\nCheck if the specified capability is in the calling thread…\nRemove all capabilities from the ambient set.\n<code>clock_nanosleep(id, TIMER_ABSTIME, request, NULL)</code>—Sleeps …\n<code>clock_nanosleep(id, 0, request, remain)</code>—Sleeps for a …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAdd or remove the specified capability to the ambient set.\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nGet core scheduling cookie of a process.\nCreate unique core scheduling cookie.\nGet the current tagged address mode for the calling thread.\nGet the <code>current</code> timer slack value of the calling thread.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDisable Syscall User Dispatch mechanism.\nSet the state of the <code>THP disable</code> flag for the calling …\n<code>__user_cap_data_struct.effective</code>\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEnable Syscall User Dispatch mechanism.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nLinux <code>futex</code>.\nDEPRECATED: There are now individual functions available …\nGet the <code>clear_child_tid</code> address set by <code>set_tid_address</code> and …\nGet the current state of the calling thread’s …\n<code>gettid()</code>—Returns the thread ID.\n<code>__user_cap_data_struct.inheritable</code>\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nReassociate the calling thread with the namespace …\nAtomically move the calling thread into one or more of the …\nGet the name of the calling thread.\n<code>nanosleep(request, remain)</code>—Sleeps for a duration.\nGet the value of the <code>no_new_privs</code> attribute for the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n<code>__user_cap_data_struct.permitted</code>\nPull core scheduling cookie from a process.\nPush core scheduling cookie to a process.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nIf the calling thread has the …\nSecurely reset the thread’s pointer authentication keys …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\n…\nSet the <code>securebits</code> flags of the calling thread.\nControls support for passing tagged user-space addresses …\nSets the <code>current</code> timer slack value for the calling thread.\nSet the state of the calling thread’s <code>keep capabilities</code> …\nSet the name of the calling thread.\nSet the calling thread’s <code>no_new_privs</code> attribute.\nSet the secure computing mode for the calling thread, to …\nConfigure the thread’s vector length of Scalable Vector …\n<code>setgid(gid)</code>\n<code>setgroups(groups)</code>-Sets the supplementary group IDs for the …\n<code>setresgid(rgid, egid, sgid)</code>\n<code>setresuid(ruid, euid, suid)</code>\n<code>setuid(uid)</code>\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet the thread’s current SVE vector length configuration.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet the current setting of the <code>THP disable</code> flag for the …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>unshare(flags)</code>—Disassociate parts of the current thread…\nVector length in bytes.\nVector length inherited across <code>execve</code>.\n<code>FUTEX_OP_ADD</code>: <code>uaddr2 += oparg;</code>\n<code>FUTEX_OP_ADD | FUTEX_OP_ARG_SHIFT</code>: <code>uaddr2 += (oparg &lt;&lt; 1);</code>\n<code>FUTEX_OP_ANDN</code>: <code>uaddr2 &amp;= ~oparg;</code>\n<code>FUTEX_OP_ANDN | FUTEX_OP_ARG_SHIFT</code>: …\n<code>FUTEX_CLOCK_REALTIME</code>\n<code>FUTEX_OP_CMP_EQ</code>: <code>if oldval == cmparg { wake(); }</code>\n<code>FUTEX_*</code> flags for use with the functions in <code>futex</code>.\n<code>FUTEX_OP_CMP_EQ</code>: <code>if oldval &gt;= cmparg { wake(); }</code>\n<code>FUTEX_OP_CMP_EQ</code>: <code>if oldval &gt; cmparg { wake(); }</code>\n<code>FUTEX_OP_CMP_EQ</code>: <code>if oldval &lt;= cmparg { wake(); }</code>\n<code>FUTEX_OP_CMP_EQ</code>: <code>if oldval &lt; cmparg { wake(); }</code>\n<code>FUTEX_OP_CMP_EQ</code>: <code>if oldval != cmparg { wake(); }</code>\nA type for the <code>tv_sec</code> field of <code>Timespec</code>.\n<code>FUTEX_OWNER_DIED</code>\n<code>FUTEX_OP_OR</code>: <code>uaddr2 |= oparg;</code>\n<code>FUTEX_OP_OR | FUTEX_OP_ARG_SHIFT</code>: <code>uaddr2 |= (oparg &lt;&lt; 1);</code>\n<code>FUTEX_PRIVATE_FLAG</code>\nA type for the <code>tv_sec</code> field of <code>Timespec</code>.\n<code>FUTEX_OP_SET</code>: <code>uaddr2 = oparg;</code>\n<code>FUTEX_OP_SET | FUTEX_OP_ARG_SHIFT</code>: <code>uaddr2 = (oparg &lt;&lt; 1);</code>\n<code>struct timespec</code>\n<code>FUTEX_WAITERS</code>\n<code>FUTEX_OP_*</code> operations for use with <code>wake_op</code>.\n<code>FUTEX_OP_CMP_*</code> operations for use with <code>wake_op</code>.\n<code>FUTEX_OP_XOR</code>: <code>uaddr2 ^= oparg;</code>\n<code>FUTEX_OP_XOR | FUTEX_OP_ARG_SHIFT</code>: <code>uaddr2 ^= (oparg &lt;&lt; 1);</code>\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nEquivalent to …\nEquivalent to …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nEquivalent to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nEquivalent to …\nEquivalent to …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nEquivalent to …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nEquivalent to …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nEquivalent to …\nEquivalent to …\nEquivalent to …\nEquivalent to …\nEquivalent to …\nEquivalent to …\nEquivalent to …\n<code>TFD_TIMER_ABSTIME</code>\n<code>CLOCK_BOOTTIME</code>—Like <code>Monotonic</code>, but advances while …\n<code>CLOCK_BOOTTIME</code>\n<code>CLOCK_BOOTTIME</code>\n<code>CLOCK_BOOTTIME_ALARM</code>—Like <code>Boottime</code>, but wakes a …\n<code>CLOCK_BOOTTIME_ALARM</code>\n<code>CLOCK_BOOTTIME_ALARM</code>\n<code>TFD_TIMER_CANCEL_ON_SET</code>\n<code>TFD_CLOEXEC</code>\n<code>clockid_t</code> <code>CLOCK_*</code> constants for use with <code>clock_gettime</code>.\nLinux dynamic clocks.\n<code>clockid_t</code> <code>CLOCK_*</code> constants for use with …\n<code>struct itimerspec</code> for use with <code>timerfd_gettime</code> and …\n<code>ClockId</code> values that are always supported at runtime.\n<code>CLOCK_MONOTONIC</code>—A clock that tells an abstract time.\n<code>CLOCK_MONOTONIC</code>\n<code>CLOCK_MONOTONIC_COARSE</code>\n<code>CLOCK_MONOTONIC_RAW</code>\n<code>TFD_NONBLOCK</code>\nA type for the <code>tv_sec</code> field of <code>Timespec</code>.\n<code>CLOCK_PROCESS_CPUTIME_ID</code>\n<code>CLOCK_REALTIME</code>—A clock that tells the “real” time.\n<code>CLOCK_REALTIME</code>\n<code>CLOCK_REALTIME_ALARM</code>—Like <code>Realtime</code>, but wakes a …\n<code>CLOCK_REALTIME_ALARM</code>\n<code>CLOCK_REALTIME_ALARM</code>\n<code>CLOCK_REALTIME_COARSE</code>\nA type for the <code>tv_sec</code> field of <code>Timespec</code>.\n<code>CLOCK_TAI</code>, available on Linux ≥ 3.10\n<code>CLOCK_THREAD_CPUTIME_ID</code>\n<code>CLOCK_*</code> constants for use with <code>timerfd_create</code>.\n<code>TFD_*</code> flags for use with <code>timerfd_create</code>.\n<code>TFD_TIMER_*</code> flags for use with <code>timerfd_settime</code>.\n<code>struct timespec</code>\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>clock_getres(id)</code>—Returns the resolution of a clock.\n<code>clock_gettime(id)</code>—Returns the current value of a clock.\nLike <code>clock_gettime</code> but with support for dynamic clocks.\n<code>clock_settime(id, timespec)</code>—Sets the current value of a …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>timerfd_create(clockid, flags)</code>—Create a timer.\n<code>timerfd_gettime(clockid, flags)</code>—Query a timer.\n<code>timerfd_settime(clockid, flags, new_value)</code>—Set the time …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.")