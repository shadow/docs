searchState.loadedDescShard("nix", 0, "Rust friendly bindings to the various *nix system …\nContains the error value\nNix’s main error type.\nCommon trait used to represent file system paths by many …\nContains the success value\nNix Result Type\nCreate a buffer large enough for storing some control …\nSafe wrappers around errno functions\nfile control options\nFeature tests for OS functionality\nQuery network interface addresses\nGenerates a wrapper function for an ioctl that passes no …\nGenerates a wrapper function for a “bad” ioctl that …\nGenerates a wrapper function for an ioctl that reads data …\nGenerates a wrapper function for a “bad” ioctl that …\nGenerates a wrapper function for an ioctl that reads an …\nGenerates a wrapper function for an ioctl that reads and …\nGenerates a wrapper function for a “bad” ioctl that …\nGenerates a wrapper function for an ioctl that reads and …\nGenerates a wrapper function for an ioctl that writes an …\nGenerates a wrapper function for a ioctl that writes an …\nGenerates a wrapper function for a “bad” ioctl that …\nGenerates a wrapper function for an ioctl that writes data …\nGenerates a wrapper function for a “bad” ioctl that …\nIs the path empty?\nLength of the path in bytes\nFunctionality involving network interfaces\nGenerate an ioctl request code for a command that passes …\nGenerate an ioctl request code for a command that reads.\nGenerate an ioctl request code for a command that reads …\nGenerate an ioctl request code for a command that writes.\nExecution scheduling\nMostly platform-specific functionality\nSleep, query system clocks, and set system clock\nSafe wrappers around functions found in libc “unistd.h”…\nExecute a function with this path as a <code>CStr</code>.\nThe sentinel value indicates that a function failed and …\nSets the platform-specific errno to no-error\nReturns the platform-specific value of errno\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the current value of errno\nReturns the current raw i32 value of errno\nReturns <code>Ok(value)</code> if it does not contain the sentinel …\nSets the value of errno.\nSets the raw i32 value of errno.\nUsed with <code>faccessat</code>, the checks for accessibility are …\nIf the provided path is an empty string, operate on the …\nDon’t automount the terminal (“basename”) component …\nUsed with <code>linkat</code> to create a link to a symbolic link’s …\nUsed with functions like <code>fstatat</code> to operate on a link …\nFlags that control how the various *at syscalls behave.\nRemoves byte range from a file without leaving a hole.\nIncreases file space by inserting a hole within the file …\nFile size is not changed.\nDeallocates space by creating a hole.\nShared file data extants are made private to the file.\nZeroes space in specified byte range.\nThe file descriptor will automatically be closed during a …\nAdd seals to the file\nDuplicate the provided file descriptor\nDuplicate the provided file descriptor and set the …\nGet the close-on-exec flag associated with the file …\nGet descriptor status flags\nGet the first lock that blocks the lock description\nReturn the capacity of a pipe\nGet seals associated with the file\nDetermine whether it would be possible to create the given …\nAcquire or release an open file description lock\nLike <code>F_OFD_SETLK</code> except that if a conflicting lock is held …\nThe file contents cannot be modified, except via shared …\nThe size of the file cannot be increased.\nPrevents further calls to <code>fcntl()</code> with <code>F_ADD_SEALS</code>.\nThe file cannot be reduced in size.\nThe file contents cannot be modified.\nSet the close-on-exec flag associated with the file …\nSet descriptor status flags\nSet or clear a file segment lock\nLike <code>F_SETLK</code> except that if a shared or exclusive lock is …\nChange the capacity of a pipe\nMode argument flags for fallocate determining operation …\nCommands for use with <code>fcntl</code>.\nAdditional configuration flags for <code>fcntl</code>’s <code>F_SETFD</code>.\nRepresents an owned flock, which unlocks on drop.\nOperations for use with <code>Flock::lock</code>.\nRepresents valid types for flock.\nexclusive file lock\nExclusive lock.  Do not block when locking.\nshared file lock\nShared lock.  Do not block when locking.\nConfiguration options for opened files.\nMask for the access mode of the file.\nOpen the file in append-only mode.\nGenerate a signal when input or output becomes possible.\nCloses the file descriptor once an <code>execve</code> call is made.\nCreate the file if it does not exist.\nTry to minimize cache effects of the I/O for this file.\nIf the specified path isn’t a directory, fail.\nImplicitly follow each <code>write()</code> with an <code>fdatasync()</code>.\nError out if a file was not created.\nSame as <code>O_SYNC</code>.\nAllow files whose sizes can’t be represented in an <code>off_t</code> …\nSame as <code>O_NONBLOCK</code>.\nDo not update the file last access time during <code>read(2)</code>s.\nDon’t attach the device as the process’ controlling …\n<code>open()</code> will fail if the given path is a symbolic link.\nWhen possible, open the file in nonblocking mode.\nObtain a file descriptor for low-level access.\nOnly allow reading.\nAllow both reading and writing.\nSimilar to <code>O_DSYNC</code> but applies to <code>read</code>s instead.\nImplicitly follow each <code>write()</code> with an <code>fsync()</code>.\nCreate an unnamed temporary file.\nTruncate an existing regular file to 0 length if it allows …\nOnly allow writing.\nSpecifies how openat2 should open a pathname.\nThe specified data will not be accessed in the near future.\nThe specified data will only be accessed once and then not …\nRevert to the default data access behavior.\nA hint that file data will be accessed randomly, and …\nThe file data will be accessed sequentially.\nThe specified data will be accessed in the near future.\nThe specific advice provided to <code>posix_fadvise</code>.\nAtomically exchange <code>old_path</code> and <code>new_path</code>.\nDon’t overwrite <code>new_path</code> of the rename.  Return an error …\ncreates a “whiteout” object at the source of the …\nDo not permit the path resolution to succeed if any …\nTreat the directory referred to by dirfd as the root …\nDisallow all magic-link resolution during path resolution. …\nDisallow resolution of symbolic links during path …\nDisallow traversal of mount points during path resolution …\nFlags for use with <code>renameat2</code>.\nPath resolution flags.\nAdditional flags for file sealing, which allows for …\nUnlock file\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nManipulates file space.\nPerform various operations on open file descriptors.\nSet the open flags used to open a file, completely …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nObtain a/an flock.\nSet the file mode new files will be created with, …\nCreate a new zero-filled <code>open_how</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nopen or create a file for reading, writing or executing\nopen or create a file for reading, writing or executing\nOpen or create a file for reading, writing or executing.\nAllows a process to describe to the system its data access …\nPre-allocate storage for a range in a file\nRead value of a symbolic link\nRead value of a symbolic link.\nRelock the file.  This can upgrade or downgrade the lock …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nChange the name of a file.\nLike <code>renameat</code>, but with an additional <code>flags</code> argument.\nSet resolve flags, completely overwriting any existing …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRemove the lock and return the object wrapped within.\nCheck if the OS supports atomic close-on-exec for sockets\nDescribes a single address for an interface as returned by …\nHolds the results of <code>getifaddrs</code>.\nNetwork address of this interface\nBroadcast address of this interface, if applicable\nPoint-to-point destination address\nFlags as from <code>SIOCGIFFLAGS</code> ioctl\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet interface addresses using libc’s <code>getifaddrs</code>\nName of the network interface\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNetmask of this interface\nNetwork interface name resolution.\nReceive all multicast packets. (see <code>netdevice(7)</code>)\nAuto media selection active. (see <code>netdevice(7)</code>)\nValid broadcast address set. (see <code>netdevice(7)</code>)\nInternal debugging flag. (see <code>netdevice(7)</code>)\nDriver signals dormant. Volatile.\nThe addresses are lost when the interface goes down. (see …\nEcho sent packets. Volatile.\nInterface is a loopback interface. (see <code>netdevice(7)</code>)\nDriver signals L1 up. Volatile.\nMaster of a load balancing bundle. (see <code>netdevice(7)</code>)\nSupports multicast. (see <code>netdevice(7)</code>)\nNo arp protocol, L2 destination address not set. (see …\nAvoid use of trailers. (see <code>netdevice(7)</code>)\nDo not provide packet information\nInterface is a point-to-point link. (see <code>netdevice(7)</code>)\nIs able to select media type via ifmap. (see <code>netdevice(7)</code>)\nInterface is in promiscuous mode. (see <code>netdevice(7)</code>)\nResources allocated. (see <code>netdevice(7)</code>)\nSlave of a load balancing bundle. (see <code>netdevice(7)</code>)\nTAP device\nTUN device (no Ethernet headers)\nInterface is running. (see <code>netdevice(7)</code>)\ntype alias for InterfaceFlags\nA network interface. Has a name like “eth0” or “…\nStandard interface flags, used by <code>getifaddrs</code>\nA list of the network interfaces available on this system. …\nAn iterator over the interfaces in an <code>Interfaces</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nResolve an interface number into an interface.\nRetrieve a list of the network interfaces available on the …\nResolve an interface into an interface number.\nObtain the index of this interface.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nIterate over the interfaces in this list.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nObtain the name of this interface.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConvert this to a slice of interfaces. Note that the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnused since Linux 2.6.2\nThe calling process and the child process share the same …\nThe caller and the child process share the same  filesystem\nThe new process shares an I/O context with the calling …\nCreate the process in a new cgroup namespace.\nCreate the process in a new IPC namespace.\nCreate the process in a new network namespace.\nThe cloned child is started in a new mount namespace.\nCreate the process in a new PID namespace.\nCreate the process in a new user namespace.\nCreate the process in a new UTS namespace.\nThe parent of the new child  (as returned by getppid(2)) …\nIf the calling process is being traced, then trace the …\nThe calling process and the child process share the same …\nThe child and the calling process share a single list of …\nThe child is placed in the same thread group as the calling\nA tracing process cannot force <code>CLONE_PTRACE</code> on this child …\nThe execution of the calling process is suspended until the\nThe calling process and the child process run in the same …\nType for the function executed by <code>clone</code>.\nOptions for use with <code>clone</code>\nCpuSet represent a bit-mask of CPUs. CpuSets are used by …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>clone</code> create a child process (<code>clone(2)</code>)\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturn the maximum number of CPU in CpuSet\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nTest to see if a CPU is in the CpuSet. <code>field</code> is the CPU id …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreate a new and empty CpuSet.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\n<code>sched_getaffinity</code> get a thread’s CPU affinity mask (…\nDetermines the CPU on which the calling thread is running.\n<code>sched_setaffinity</code> set a thread’s CPU affinity mask (…\nExplicitly yield the processor to other threads.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nAdd a CPU to CpuSet. <code>field</code> is the CPU id to add\nreassociate thread with a namespace\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRemove a CPU from CpuSet. <code>field</code> is the CPU id to remove\ndisassociate parts of the process execution context\nProvide helpers for making ioctl system calls.\nInterfaces for managing memory-backed files.\nMemory management declarations.\nProcess execution domains\nprctl is a Linux-only API for performing operations on a …\nConfigure the process resource limits.\nOperating system signals.\nInterface for the <code>signalfd</code> syscall.\nSocket interface functions\nGet filesystem statistics, non-portably\nGet filesystem statistics\nTimer API via signals.\nTimer API via file descriptors.\nVectored I/O\nGet system identification\nWait for a process to change status\nA safe wrapper around <code>epoll</code>.\nPollTimeout argument for polling.\nBlocks for at most <code>i32::MAX</code> milliseconds.\nBlocks indefinitely.\nReturns immediately.\nAdd an entry to the interest list of the epoll file …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns the timeout in milliseconds if there is some, …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nRemove (deregister) the target file descriptor <code>fd</code> from the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the timeout as a <code>Duration</code> if there is some, …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns if <code>self</code> equals <code>PollTimeout::NONE</code>.\nReturns if <code>self</code> does not equal <code>PollTimeout::NONE</code>.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nChange the settings associated with <code>fd</code> in the interest …\nCreates a new epoll instance and returns a file descriptor …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWaits for I/O events, blocking the calling thread if no …\nGet a flags value with all known bits set.\nArms <code>self</code>, a following call to <code>poll</code>, <code>select</code> or <code>epoll</code> will …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nDefuses <code>self</code>, a following call to <code>poll</code>, <code>select</code> or <code>epoll</code> …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\n<code>EventFd::from_value_and_flags</code> with <code>init_val = 0</code> and given …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\n<code>EventFd::from_value_and_flags</code> with given <code>init_val</code> and …\nConstructs <code>EventFd</code> with the given <code>init_val</code> and <code>flags</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\n<code>EventFd::from_value_and_flags</code> with <code>init_val = 0</code> and …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nEnqueues <code>value</code> triggers.\nGenerate an ioctl request code for a command that passes …\nGenerate an ioctl request code for a command that reads.\nGenerate an ioctl request code for a command that reads …\nGenerate an ioctl request code for a command that writes.\nAllow sealing operations on this file.\nSet the close-on-exec (<code>FD_CLOEXEC</code>) flag on the new file …\nAnonymous file will be created using huge pages. It should …\nhugetlb size of 16GB.\nhugetlb size of 16MB.\nhugetlb size of 1GB.\nFollowing are to be used with [<code>MFD_HUGETLB</code>], indicating …\nhugetlb size of 256MB.\nhugetlb size of 2GB.\nhugetlb size of 2MB.\nhugetlb size of 32MB.\nhugetlb size of 512MB.\nhugetlb size of 8MB.\nOptions that change the behavior of <code>memfd_create</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreates an anonymous file that lives in memory, and return …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUndo the effect of an earlier <code>MADV_DONTDUMP</code>.\nUndo the effect of <code>MADV_DONTFORK</code>.\nExclude the given range from a core dump.\nDo not make pages in this range available to the child …\nDo not expect access in the near future.\nSpecify that the application no longer needs the pages in …\nEnable Transparent Huge Pages (THP) for pages in the given …\nPoison the given pages.\nEnable Kernel Samepage Merging (KSM) for the given pages.\nUndo the effect of <code>MADV_HUGEPAGE</code>.\nNo further special treatment. This is the default.\nExpect random page references.\nFree up a given range of pages and its associated backing …\nExpect sequential page references.\nPreserve the memory of each page but offline the original …\nUndo the effect of <code>MADV_MERGEABLE</code>\nExpect access in the near future.\nPut the mapping into the first 2GB of the process address …\nSynonym for <code>MAP_ANONYMOUS</code>.\nThe mapping is not backed by any file.\nCompatibility flag. Ignored.\nCompatibility flag. Ignored.\nCompatibility flag. Ignored.\nPlace the mapping at exactly the address specified in <code>addr</code>.\nPlace the mapping at exactly the address specified in <code>addr</code>…\nUsed for stacks; indicates to the kernel that the mapping …\nAllocate the mapping using “huge pages.”\nMake use of 16GB huge page (must be supported by the …\nMake use of 16MB huge page (must be supported by the …\nMake use of 1GB huge page (must be supported by the system)\nMake use of 1MB huge page (must be supported by the system)\nMake use of 256MB huge page (must be supported by the …\nMake use of 2GB huge page (must be supported by the system)\nMake use of 2MB huge page (must be supported by the system)\nMake use of 32MB huge page (must be supported by the …\nMake use of 512KB huge page (must be supported by the …\nMake use of 512MB huge page (must be supported by the …\nMake use of 64KB huge page (must be supported by the …\nMake use of 8MB huge page (must be supported by the system)\nMark the mmaped region to be locked in the same way as …\nOnly meaningful when used with <code>MAP_POPULATE</code>. Don’t …\nDo not reserve swap space for this mapping.\nPopulate page tables for a mapping.\nCreate a private copy-on-write mapping. Mutually exclusive …\nShare this mapping. Mutually exclusive with <code>MAP_PRIVATE</code>.\nRegion grows down, like a stack.\nLock pages that are currently mapped into the address …\nLock pages which will become mapped into the address space …\nPlace the mapping at exactly the address specified in …\nPermit the kernel to relocate the mapping to a new virtual …\nOptions for <code>mremap</code>.\nSchedule an update but return immediately.\nInvalidate all cached data.\nPerform an update and wait for it to complete.\nAdditional parameters for <code>mmap</code>.\nFlags for <code>mlockall</code>.\nUsage information for a range of memory to allow for …\nConfiguration flags for <code>msync</code>.\nPages can be executed\nApply protection up to the end of a mapping that grows …\nApply protection down to the beginning of a mapping that …\nPages cannot be accessed.\nPages can be read.\nPages can be written.\nDesired memory protection of a memory mapping.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\ngive advice about use of memory\nCreate <code>MAP_HUGETLB</code> with provided size of huge page.\nLocks all memory pages that contain part of the address …\nLocks all memory pages mapped into this process’ address …\nAllocate memory, or map files or devices into memory\nCreate an anonymous memory mapping.\nSet protection of memory mapping.\nExpands (or shrinks) an existing memory mapping, …\nsynchronize a mapped region\nUnlocks all memory pages that contain part of the address …\nUnlocks all memory pages mapped into this process’ …\nremove a mapping\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCreates and opens a new, or opens an existing, POSIX …\nPerforms the converse of <code>shm_open</code>, removing an object …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nProvide the legacy virtual address space layout.\nLimit the address space to 32 bits.\nUse <code>0xc0000000</code> as the offset at which to search a virtual …\nDisable address-space-layout randomization.\nUser-space function pointers to signal handlers point to …\nMap page 0 as read-only.\nFlags used and returned by <code>get()</code> and <code>set()</code>.\n<code>PROT_READ</code> implies <code>PROT_EXEC</code> for <code>mmap(2)</code>.\nNo effects.\n<code>select(2)</code>, <code>pselect(2)</code>, and <code>ppoll(2)</code> do not modify the …\nHave <code>uname(2)</code> report a 2.6.40+ version number rather than …\nNo effects.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nRetrieve the current process personality.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nSet the current process personality.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUses the system-wide default.\nThe thread will receive SIGBUS as soon as a memory …\nThe process is killed only when it accesses a corrupted …\nThe type of hardware memory corruption kill policy for the …\nClear the thread memory corruption kill policy and use the …\nReturns the argument unchanged.\nGet the “child subreaper” attribute for this process\nGet the dumpable attribute for this process.\nGet the “keep capabilities” attribute for this process\nGet the thread memory corruption kill policy\nReturn the name of the calling thread\nGet the “no new privs” attribute for the calling …\nReturns the current parent-death signal\nGet the “THP disable” flag for the calling thread.\nGet the timerslack for the calling thread.\nCalls <code>U::from(self)</code>.\nSet the “child subreaper” attribute for this process\nSet the dumpable attribute which determines if core dumps …\nSet the “keep capabilities” attribute for this …\nSet the thread memory corruption kill policy\nSet the name of the calling thread. Strings longer than 15 …\nSet the calling threads “no new privs” attribute. Once …\nSet the parent-death signal of the calling process. This …\nSet the state of the “THP disable” flag for the …\nSets the timer slack value for the calling thread. Timer …\nSet an identifier (or reset it) to the address memory …\nDisable all performance counters attached to the calling …\nEnable all performance counters attached to the calling …\nThe maximum amount (in bytes) of virtual memory the …\nThe largest size (in bytes) core(5) file that may be …\nThe maximum amount of cpu time (in seconds) to be used by …\nThe maximum size (in bytes) of the data segment for a …\nThe largest size (in bytes) file that may be created.\nA limit on the combined number of flock locks and fcntl …\nThe maximum size (in bytes) which a process may lock into …\nA limit on the number of bytes that can be allocated for …\nA ceiling to which the process’s nice value can be …\nThe maximum number of open files for this process.\nThe maximum number of simultaneous processes for this user …\nWhen there is memory pressure and swap is available, …\nA ceiling on the real-time priority that may be set for …\nA limit (in microseconds) on the amount of CPU time that a …\nA limit on the number of signals that may be queued for …\nThe maximum size (in bytes) of the stack segment for a …\nResource usage for all the children that have terminated …\nResource usage for the current process.\nResource usage for the calling thread.\nTypes of process resources.\nOutput of <code>getrusage</code> with information about resource usage. …\nWhose resource usage should be returned by <code>getrusage</code>.\nNumber of times a read was done from a block device.\nNumber of times a write was done to a block device.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNumber of times all of the memory was fully swapped out.\nGet the current processes resource limits\nGet usage information for a process, its children or the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of times a context switch was imposed by the kernel …\nNumber of IPC messages received.\nNumber of IPC messages sent.\nNumber of page faults that were served through I/O (i.e. …\nThe resident set size at its peak, in kilobytes.\nNumber of page faults that were served without resorting …\nSet the current processes resource limits\nIntegral value expressed in kilobytes times ticks of …\nNumber of signals received.\nTotal amount of time spent executing in kernel mode.\nIntegral value expressed in kilobytes times ticks of …\nIntegral value expressed in kilobytes times ticks of …\nTotal amount of time spent executing in user mode.\nNumber of times a context switch was voluntarily invoked.\nUse the given signal-catching function, which takes in the …\nWhen catching a <code>Signal::SIGCHLD</code> signal, the signal will be …\nWhen catching a <code>Signal::SIGCHLD</code> signal, the system will not\nFurther occurrences of the delivered signal are not masked …\nThe system will deliver the signal to the process on a …\nThe handler is reset back to the default at the moment the …\nRequests that certain system calls restart if interrupted …\nThis flag is controlled internally by Nix.\nAbort\nAlarm clock\nBus error\nTo parent on child stop or exit\nContinue a stopped process\nFloating point exception\nHangup\nIllegal instruction (not reset when caught)\nInterrupt\nInput/output possible signal\nAlias for <code>SIGABRT</code>\nKill (cannot be caught or ignored)\nWrite on a pipe with no one to read it\nAlias for <code>SIGIO</code>\nProfiling time alarm\nPower failure imminent.\nQuit\nSegmentation violation\nStack fault (obsolete)\nSendable stop signal not from tty\nBad system call\nSoftware termination signal from kill\nTrace trap (not reset when caught)\nStop signal from tty\nTo readers pgrp upon background tty read\nLike TTIN if (tp-&gt;t_local&amp;LTOSTOP)\nAlias for <code>SIGSYS</code>\nUrgent condition on IO channel\nUser defined signal 1\nUser defined signal 2\nVirtual time alarm\nWindow size changes\nExceeded CPU time limit\nExceeded file size limit\nThe new mask is the union of the current mask and the …\nThe current mask is replaced by the specified set.\nThe new mask is the intersection of the current mask and …\nControls the behavior of a <code>SigAction</code>\nAction to take on receipt of a signal. Corresponds to …\nUse the given signal-catching function, which takes in the …\nDefault signal handling.\nUsed to request asynchronous notification of the …\nA signal handler.\nRequest that the signal be ignored.\nSpecifies a set of <code>Signal</code>s that may be blocked, waited …\nIterator for a <code>SigSet</code>.\nNo notification will be delivered\nSpecifies the notification method used by a <code>SigEvent</code>\nNotify by delivering a signal to the process.\nNotify by delivering a signal to a thread.\nSpecifies how certain functions should manipulate a signal …\nTypes of operating system signals\nIterate through all signals defined by this operating …\nAdd the specified signal to the set.\nGet a flags value with all known bits set.\nInitialize to include all signals.\nReturns a mutable pointer to the <code>sigevent</code> wrapped by <code>self</code>\nReturns name of signal.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRemove all signals from this set.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturn whether this set includes the specified signal.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nInitialize to include nothing.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the flags set on the action.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nConverts a <code>libc::sigset_t</code> object to a <code>SigSet</code> without …\nReturns the action’s handler.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nReturns an iterator that yields the signals contained in …\nYield a set of contained named flags values.\nIterate through all signals defined by this OS\nSend a signal to a process\nSend a signal to a process group\nReturns the set of signals that are blocked during …\nCreates a new action.\n<strong>Note:</strong> this constructor does not allow the user to set the …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nManages the signal mask (set of blocked signals) for the …\nSend a signal to the current thread\nThe intersection of a source flags value with the …\nRemove the specified signal from this set.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nChanges the action taken by a process on receipt of a …\nReturn a copy of the inner structure\nSignal management (see signal(3p))\nExamine and change blocked signals.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nWait for a signal\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nAdds the set of signals to the signal mask for the calling …\nGets the currently blocked (masked) set of signals for the …\nSets the set of signals as the signal mask for the calling …\nSets the set of signals as the signal mask, and returns …\nRemoves the set of signals from the signal mask for the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nIdentifies a thread for <code>SigevNotify::SigevThreadId</code>\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSuspends execution of the calling thread until one of the …\nWill be present in the <code>si_value</code> field of the …\nWill be present in the <code>si_value</code> field of the …\nSignal to deliver\nSignal to send\nLWP ID of the thread to notify\nA helper struct for creating, reading and closing a …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCreates a new file descriptor for reading signals.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThese constants specify the protocol family to be used in …\nInterface to kernel crypto API\nSocket address for the Linux kernel crypto API\nSet the length of associated authentication data (AAD) …\nSet IV for <code>AF_ALG</code> crypto API.\nSet crypto operation for <code>AF_ALG</code> crypto API. It may be one …\nAppleTalk\nAccess to raw ATM PVCs\nAccess to ATM Switched Virtual Circuits\nAmateur radio AX.25 protocol\nBluetooth low-level socket protocol\nFurther receptions and transmissions will be disallowed.\nCan’t be used for creating sockets; mostly used for …\nEricsson’s Communication CPU to Application CPU …\nController Area Network automotive bus protocol\nThe Controller Area Network broadcast manager protocol (ref…\nThe Controller Area Network raw socket protocol (ref)\nA type-safe zero-copy wrapper around a single control …\nA type-safe wrapper around a single control message, as …\nSupports datagrams (connectionless, unreliable messages of …\nDECet protocol sockets.\nAcorn Econet protocol\nNon-DIX type protocol number defined for the Ethernet IEEE …\nRepresents a socket option that can be retrieved.\nInfiniBand native addressing\nICMP protocol (icmp(7))\nICMPv6 protocol (ICMP over IPv6)\nIEEE 802.15.4 WPAN (wireless personal area network) raw …\nIPv4 Internet protocols (see <code>ip(7)</code>)\nIPv6 Internet protocols (see <code>ipv6(7)</code>)\nRequest for multicast socket operations\nConfigure the sending addressing and interface for v4.\nSocket error queue control messages read with the …\nConfigure the hop limit for v6 multicast traffic.\nRequest for ipv6 multicast socket operations\nConfigure the sending addressing and interface for v6.\nSocket error queue control messages read with the …\nIPX - Novell protocols\nSocket interface over IrDA\nNew “modular ISDN” driver interface protocol\nIUCV (inter-user communication vehicle) z/VM protocol for …\nKey management protocol.\nHardware Address\nLogical link control (IEEE 802.2 LLC) protocol\nSets the listen queue size to -1 for system supporting it\nSets the listen queue size to system <code>SOMAXCONN</code> value\nSet the <code>close-on-exec</code> flag for the file descriptor …\nReceive flags: Control Data was discarded (buffer too …\nEnables nonblocking operation; if the operation would …\nTerminates a record (when this notion is supported, as for …\nThis flag specifies that queued errors should be received …\nRequests not to send <code>SIGPIPE</code> errors when the other end …\nSends or requests out-of-band data on sockets that support …\nPeeks at an incoming message. The data is treated as …\nFor raw (<code>Packet</code>), Internet datagram (since Linux …\nReceive operation blocks until the full amount of data can …\nTurns on [<code>MSG_DONTWAIT</code>] after the first message has been …\nMultiprotocol Label Switching\nFlags for send/recv and their relatives\nPreallocated structures needed for <code>recvmmsg</code> and <code>sendmmsg</code> …\nIterator over results of <code>recvmmsg</code>/<code>sendmmsg</code>\nReserved for “802.2LLC project”; never used.\nAX.25 packet layer protocol. (see netrom(4))\nKernel user interface device (see <code>netlink(7)</code>)\nAddress for the Linux kernel user interface device.\nAuditing (ref)\nNetlink interface to request information about ciphers …\nDECnet routing messages (ref)\nAccess to FIB lookup from user space (ref)\nGeneric netlink family for simplified netlink usage. (ref)\nTransport IPv6 packets from netfilter to user space.  Used …\nOpen-iSCSI (ref)\nKernel messages to user space (ref)\nNetfilter/iptables ULOG. (ref)\nNetfilter subsystem (ref)\nInfiniband RDMA (ref)\nReceives routing and link updates and may be used to …\nSCSI Transports (ref)\nSELinux event notifications. (ref)\nQuery information about sockets of various protocol …\nReserved for user-mode socket protocols (ref)\nNear field communication\nLow level packet interface (see <code>packet(7)</code>)\nNokia cellular modem IPC/RPC interface\nGeneric PPP transport layer, for setting up L2 tunnels …\nProvides raw network protocol access.\nRaw sockets (raw(7))\nProvides a reliable datagram layer that does not guarantee …\nReliable Datagram Sockets (RDS) protocol\nFurther receptions will be disallowed.\nContains outcome of sending or receiving a message\nRATS (Radio Amateur Telecommunications Society) Open …\nRx, Andrew File System remote procedure call protocol\nSO_RXQ_OVFL indicates that an unsigned 32 bit value …\nSO_RXQ_OVFL indicates that an unsigned 32 bit value …\nSet close-on-exec on the new descriptor\nSet non-blocking mode on the new socket\nGenerate a unique identifier along with each transmitted …\nReturn transmit timestamps alongside an empty packet …\nReport hardware timestamps as generated by …\nCollect receiving timestamps as reported by hardware\nCollect receiving timestamps as reported by software\nReport any software timestamps when available.\nCollect transmitting timestamps as reported by hardware\nCollect transmitting timestamps as reported by software\nReceived version of <code>ControlMessage::ScmCredentials</code>\nA message of type <code>SCM_CREDENTIALS</code>, containing the pid, uid …\nReceived version of <code>ControlMessage::ScmRights</code>\nA message of type <code>SCM_RIGHTS</code>, containing an array of file …\nA message of type <code>SCM_TIMESTAMP</code>, containing the time the …\nNanoseconds resolution timestamp\nA set of nanosecond resolution timestamps\nThis was a short-lived (between Linux 2.1.30 and …\nProvides a sequenced, reliable, two-way connection- based …\nRepresents a socket option that can be set.\nIBM SNA\nAdditional socket options\nConstants used in <code>socket</code> and <code>socketpair</code> to specify the …\nThese constants are used to specify the communication …\nAn IPv4 socket address\nAn IPv6 socket address\nAnything that, in C, can be cast back and forth to <code>sockaddr</code>…\nA container for any sockaddr type\nProvides sequenced, reliable, two-way, connection- based …\nTCP protocol (ip(7))\nConfiguration flags for <code>SO_TIMESTAMPING</code> interface\nFor representing packet timestamps via <code>SO_TIMESTAMPING</code> …\nTIPC, “cluster domain sockets” protocol\nThese constants correspond to TLS 1.2 message types, as …\n<code>SOL_TLS</code> messages of type <code>TLS_GET_RECORD_TYPE</code>\nConfigure the transmission time of packets.\nUDP protocol (ip(7))\nUDP Generic Receive Offload (GRO) allows receiving …\nUDP GSO makes it possible for applications to generate …\nLocal communication (see <code>unix(7)</code>)\nA wrapper around <code>sockaddr_un</code>.\nUnix credentials of the sending process.\nUnspecified address family, (see <code>getaddrinfo(3)</code>)\nVMWare VSockets protocol for hypervisor-guest interaction.\nSocket address for VMWare VSockets protocol\nLegacy protocol for wide area network (WAN) connectivity …\nFurther  transmissions will be disallowed.\nITU-T X.25 / ISO-8208 protocol (see <code>x25(7)</code>)\nAccept a connection on a socket\nAccept a connection on a socket\nPhysical-layer address (MAC)\nReturn the socket’s cipher name, for example <code>sha1</code>.\nReturn the socket’s cipher type, for example <code>hash</code> or <code>aead</code>…\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nIf this address represents an abstract socket, return its …\nSafely and falliably downcast to an immutable reference\nSafely and falliably downcast to a mutable reference\nSafely and falliably downcast to an immutable reference\nSafely and falliably downcast to a mutable reference\nReturns a mutable pointer to the raw <code>sockaddr_un</code> struct\nSafely and falliably downcast to an immutable reference\nSafely and falliably downcast to a mutable reference\nReturns a raw pointer to the inner structure.  Useful for …\nReturns a raw pointer to the inner structure.  Useful for …\nReturns a pointer to the raw <code>sockaddr_un</code> struct\nSafely and falliably downcast to an immutable reference\nSafely and falliably downcast to an immutable reference\nSafely and falliably downcast to a mutable reference\nSafely and falliably downcast to a mutable reference\nDowncast to an immutable <code>[UnixAddr]</code> reference.\nDowncast to a mutable <code>[UnixAddr]</code> reference.\nSafely and falliably downcast to an immutable reference\nSafely and falliably downcast to a mutable reference\nBind a name to a socket\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nContext Identifier (CID)\nIterate over the valid control messages pointed to by this …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nInitiate a connection on a socket\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturn the address family of this socket\nReturn the address family of this socket\nReturns the flow information associated with this address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nCreate a new <code>AddressFamily</code> from an integer value retrieved …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nUnsafe constructor from a variable length source\nLook up the value of this socket option on the given …\nGet the address of the peer connected to the socket <code>fd</code>.\nGet the current address to which the socket <code>fd</code> is bound.\nGet the current value for the requested socket option\nReturns the group identifier\nReturn the socket’s multicast groups mask\nLength of MAC address\nARP hardware type\nhardware based timestamp\nlegacy timestamp, usually empty\nInterface number\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over the filled io slices pointed by this msghdr\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nCheck if this address is an “unnamed” unix socket …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nReturn the length of valid data in the sockaddr structure.\nReturn the length of valid data in the sockaddr structure.\nListen for connections on a socket\nCreate a new sockaddr_un representing a filesystem path.\nConstruct a new socket address from its port ID and …\nConstruct an <code>AF_ALG</code> socket from its cipher name and type.\nConstruct a <code>VsockAddr</code> from its raw fields.\nInstantiate a new <code>IpMembershipRequest</code>\nInstantiate a new <code>Ipv6MembershipRequest</code>\nCreate a <code>Backlog</code>, an <code>EINVAL</code> will be returned if <code>val</code> is …\nCreates a new instance with the credentials of the current …\nCreates a new socket address from IPv4 octets and a port …\nCreate a new <code>sockaddr_un</code> representing an address in the “…\nCreate a new <code>sockaddr_un</code> representing an “unnamed” …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nIf this address represents a filesystem path, return that …\nReturns the addrlen of this socket - …\nReturn the socket’s port ID.\nReturns the process identifier\nPacket type\nPort number\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nPreallocate structure used by <code>recvmmsg</code> and <code>sendmmsg</code> takes …\nPhysical-layer protocol\nReceive data from a connection-oriented socket. Returns …\nReceive data from a connectionless or connection-oriented …\nAn extension of recvmsg that allows the caller to receive …\nReceive message in scatter-gather vectors from a socket, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the scope ID associated with this address.\nSend data to a connection-oriented socket. Returns the …\nAn extension of <code>sendmsg</code> that allows the caller to transmit …\nSend data in scatter-gather vectors to a socket, possibly …\nSend a message to a socket\nSet the value of this socket option on the given socket.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the value for the requested socket option\nShut down part of a full-duplex connection.\nReturn the available space in the structure\nReturn the available space in the structure\nCreate an endpoint for communication\nCreate a pair of connected sockets\nSocket options as used by <code>setsockopt</code> and <code>getsockopt</code>.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nsoftware based timestamp, usually one containing data\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the user identifier\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns a value indicating whether or not this socket has …\nAES-128-GCM\nAES-256-GCM\nBind this socket to a particular device like “eth0”.\nSet or get the broadcast flag.\nCHACHA20-POLY1305\nSet or get the don’t route flag.\nJoin a multicast group\nIf enabled, the kernel will not reserve an ephemeral port …\nLeave a multicast group.\nIf enabled, this boolean option allows binding to an IP …\nFetch the current system-estimated Path MTU.\nSet or read a boolean integer argument that determines …\nSet or read the time-to-live value of outgoing multicast …\nSet or receive the Type-Of-Service (TOS) field that is …\nSetting this boolean option enables transparent proxying …\nThe <code>recvmsg(2)</code> call will return the destination IP address …\nPass an <code>IP_PKTINFO</code> ancillary message that contains a …\nEnable extended reliable error message passing.\nSet or retrieve the current time-to-live field that is …\nJoin an IPv6 multicast group.\nSet “don’t fragment packet” flag on the IPv6 packet.\nLeave an IPv6 multicast group.\nSet or read the hop limit value of outgoing IPv6 multicast …\nThe <code>recvmsg(2)</code> call will return the destination IP address …\nControl receiving of asynchronous error options.\nSet delivery of the <code>IPV6_PKTINFO</code> control message on …\nTraffic class associated with outgoing packets\nSet the unicast hop limit for the socket.\nThe socket is restricted to sending and receiving IPv6 …\nEnable sending of keep-alive messages on …\nWhen enabled,  a close(2) or shutdown(2) will not return …\nSet the mark for each packet sent through this socket …\nIf this option is enabled, out-of-band data is directly …\nEnable or disable the receiving of the <code>SCM_CREDENTIALS</code> …\nReturn the credentials of the foreign process connected to …\nSet the protocol-defined priority for all packets to be …\nSets or gets the maximum socket receive buffer in bytes.\nUsing this socket option, a privileged (<code>CAP_NET_ADMIN</code>) …\nSpecify the receiving timeout until reporting an error.\nEnable or disable the receiving of the <code>SO_TIMESTAMP</code> …\nEnable or disable the receiving of the <code>SO_TIMESTAMPNS</code> …\nEnables local address reuse\nPermits multiple AF_INET or AF_INET6 sockets to be bound …\nIndicates that an unsigned 32-bit value ancillary message …\nSpecify the sending timeout until reporting an error.\nSets or gets the maximum socket send buffer in bytes.\nUsing this socket option, a privileged (<code>CAP_NET_ADMIN</code>)  …\nGets the socket type as an integer.\nGet and clear the pending socket error.\nThis option allows the caller to set the TCP congestion …\nEnables TCP Fast Open (RFC 7413) on a connecting socket. …\nThe maximum number of keepalive probes TCP should send …\nThe time (in seconds) the connection needs to remain idle …\nThe time (in seconds) between individual keepalive probes.\nThe maximum segment size for outgoing TCP packets.\nUnder most circumstances, TCP sends data when it is …\nSet the Kernel TLS read parameters on the TCP socket.\nSet the Kernel TLS write parameters on the TCP socket.\nSet the Upper Layer Protocol (ULP) on the TCP socket.\nSpecifies the maximum amount of time in milliseconds that …\nSpecifies exact type of timestamping information collected …\nValue used with the <code>TcpTlsTx</code> and <code>TcpTlsRx</code> socket options.\nConfigures the behavior of time-based transmission of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFlags for <code>fchmodat</code> function.\n“File mode / permissions” flags.\n“File type” flags for <code>mknod</code> and related functions.\nRead for group.\nRead for other.\nRead for owner.\nRead write and execute for group.\nRead, write and execute for other.\nRead, write and execute for owner.\nSet group id on execution.\nSet user id on execution.\nWrite for group.\nWrite for other.\nWrite for owner.\nExecute for group.\nExecute for other.\nExecute for owner.\nFlags for <code>utimensat</code> function.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nChange the file permission bits of the file specified by a …\nChange the file permission bits.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nChange the access and modification times of the file …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nChange the access and modification times of a file without …\nCreate a special or ordinary file, by pathname.\nCreate a special or ordinary file, relative to a given …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nChange the access and modification times of a file.\nChange the access and modification times of a file.\nDescribes the file system type as known by the operating …\nDescribes a mounted file system\nSize of a block\nTotal data blocks in filesystem\nFree blocks available to unprivileged user\nFree blocks in filesystem\nTotal file nodes in filesystem\nFree file nodes in filesystem\nFilesystem ID\nMagic code defining system type\nGet the mount flags\nReturns the argument unchanged.\nReturns the argument unchanged.\nIdentifies a mounted file system\nDescribes a mounted file system.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum length of filenames\nOptimal transfer block size\nDescribes a mounted file system.\nFile system mount Flags\nAppend-only file\nImmutable file\nAllow mandatory locks on the filesystem\nDo not update access times on files\nDo not interpret character or block-special devices\nDo not update access times on files\nDo not allow execution of binaries on the filesystem\nDo not allow the set-uid bits to have an effect\nRead Only\nUpdate access time relative to modify/change time\nAll IO should be done synchronously\nWrite on file/directory/symlink\nWrapper around the POSIX <code>statvfs</code> struct\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nget the file system block size\nGet the number of blocks.\nGet the number of free blocks for unprivileged users\nGet the number of free blocks in the file system\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet the total number of file inodes\nGet the number of free file inodes for unprivileged users\nGet the number of free file inodes\nGet the file system id\nGet the mount flags\nGet the fundamental file system block size\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturn a <code>Statvfs</code> object with information about <code>fd</code>\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nGet the maximum filename length\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nReturn a <code>Statvfs</code> object with information about the <code>path</code>\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSystem info structure returned by <code>sysinfo</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the load average tuple.\nCurrent number of processes.\nReturns the total amount of installed RAM in Bytes.\nReturns the amount of completely unused RAM in Bytes.\nReturns the amount of unused swap memory in Bytes.\nReturns the amount of swap memory in Bytes.\nReturns system information.\nReturns the time since system boot.\nUpdate the timestamp to <code>Now</code>\nLeave the timestamp unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes a new <code>TimeSpec</code> with given number of microseconds.\nMakes a new <code>TimeVal</code> with given number of microseconds.\nMakes a new <code>TimeSpec</code> with given number of nanoseconds.\nMakes a new <code>TimeVal</code> with given number of nanoseconds.  …\nConstruct a new <code>TimeSpec</code> from its components\nConstruct a new <code>TimeVal</code> from its components\nAn enumeration allowing the definition of the expiration …\nAlarm will trigger every specified interval of time.\nAlarm will trigger after a specified delay and then every …\nAlarm will trigger once after the time given in <code>TimeSpec</code>\nA Unix signal per-process timer.\nFlags that are used for arming the timer.\nReturns the argument unchanged.\nGet the parameters for the alarm currently set, if any.\nCalls <code>U::from(self)</code>.\nCreates a new timer based on the clock defined by <code>clockid</code>. …\nReturn the number of timers that have overrun\nSet a new alarm on the timer.\nLike <code>CLOCK_MONOTONIC</code>, except that <code>CLOCK_BOOTTIME</code> includes …\nLike <code>CLOCK_BOOTTIME</code>, but will wake the system if it is …\nA non-settable monotonically increasing clock.\nA settable system-wide real-time clock.\nLike <code>CLOCK_REALTIME</code>, but will wake the system if it is …\nThe type of the clock used to mark the progress of the …\nAn enumeration allowing the definition of the expiration …\nAlarm will trigger every specified interval of time.\nAlarm will trigger after a specified delay and then every …\nAlarm will trigger once after the time given in <code>TimeSpec</code>\nSet the <code>FD_CLOEXEC</code> flag on the file descriptor.\nSet the <code>O_NONBLOCK</code> flag on the open file description …\nA timerfd instance. This is also a file descriptor, you …\nAdditional flags to change the behaviour of the file …\nFlags that are used for arming the timer.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet the parameters for the alarm currently set, if any.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nCreates a new timer based on the clock defined by <code>clockid</code>. …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets a new alarm on the timer.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRemove the alarm if any is set.\nWait for the configured alarm to expire.\nA slice of memory in a remote process, starting at address …\nThe starting address of this slice (<code>iov_base</code>).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe number of bytes in this slice (<code>iov_len</code>).\nLow-level read from a file, with specified offset.\nRead from <code>fd</code> at <code>offset</code> filling buffers in <code>iov</code>.\nRead data directly from another process’s virtual memory …\nWrite data directly to another process’s virtual memory …\nLow-level write to a file, with specified offset.\nWrite to <code>fd</code> at <code>offset</code> from buffers in <code>iov</code>.\nLow-level vectored read from a raw file descriptor\nLow-level vectored write to a raw file descriptor\nDescribes the running system.  Return type of <code>uname</code>.\nNIS or YP domain name of this machine.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMachine hardware platform.\nNetwork name of this machine.\nRelease level of the operating system.\nName of the operating system implementation.\nGet system identification\nVersion level of the operating system.\nWait for any child\nThe process was previously stopped but has resumed …\nThe process exited normally (as with <code>exit()</code> or returning …\nThe ID argument for <code>waitid</code>\nWait for the child whose process group ID matches the …\nWait for the child referred to by the given PID file …\nWait for the child whose process ID matches the given PID\nThe traced process was stopped by a <code>PTRACE_EVENT_*</code> event. …\nThe traced process was stopped by execution of a system …\nThe process was killed by the given signal. The third field\nThere are currently no state changes to report in any …\nThe process is alive, but was stopped by the given signal. …\nReport the status of selected processes that have …\nReport the status of selected processes which have …\nDo not block when there are no processes wishing to report …\nDon’t reap, just poll status.\nAn alias for WUNTRACED.\nReport the status of selected processes which are stopped …\nControls the behavior of <code>waitpid</code>.\nPossible return values from <code>wait()</code> or <code>waitpid()</code>.\nWait on all children, regardless of type\nWait for “clone” children only.\nDon’t wait on children of other threads in this group\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nConvert a raw <code>wstatus</code> as returned by <code>waitpid</code>/<code>wait</code> into a …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nExtracts the PID from the WaitStatus unless it equals …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWait for any child process to change status or a signal is …\nWait for a process to change status\nWait for a process to change status\nStarts at zero when the kernel boots and increments …\nLike <code>CLOCK_BOOTTIME</code>, but will wake the system if it is …\nIncrements in SI seconds.\nLike <code>CLOCK_MONOTONIC</code>, but optimized for execution time at …\nSimilar to <code>CLOCK_MONOTONIC</code>, but provides access to a raw …\nReturns the execution time of the calling process.\nIncrements as a wall clock should.\nLike <code>CLOCK_REALTIME</code>, but not settable.\nLike <code>CLOCK_REALTIME</code>, but optimized for execution time at …\nInternational Atomic Time.\nReturns the execution time of the calling thread.\nClock identifier\nFlags that are used for arming the timer.\nIndicates that a requested time value should be treated as …\nGet a flags value with all known bits set.\nGets the raw <code>clockid_t</code> wrapped by <code>self</code>\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet the clock id of the specified process id, (see …\nGet the resolution of the specified clock, (see …\nGet the time of the specified clock, (see clock_gettime(2)…\nSuspend execution of this thread for the amount of time …\nSet the time of the specified clock, (see clock_settime(2)…\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates <code>ClockId</code> from raw <code>clockid_t</code>\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the current time on the clock id\nReturns <code>ClockId</code> of a <code>pid</code> CPU-time clock\nThe intersection of a source flags value with the …\nReturns resolution of the clock id\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets time to <code>timespec</code> on the clock id\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nMaximum number of I/O operations in a single list I/O call …\nMaximum number of outstanding asynchronous I/O operations …\nThe maximum amount by which a process can decrease its …\nMaximum length of argument to the exec functions including …\nMaximum number of functions that may be registered with …\nOptions for access()\nMaximum obase values allowed by the bc utility.\nMaximum number of elements permitted in an array by the bc …\nMaximum scale value allowed by the bc utility.\nMaximum length of a string constant accepted by the bc …\nMaximum number of simultaneous processes per real user ID.\nThe frequency of the statistics clock in ticks per second.\nMaximum number of weights that can be assigned to an entry …\nThis is the child process of the fork.\nMaximum number of timer expiration overruns.\nMaximum number of expressions that can be nested within …\nMinimum number of bits needed to represent, as a signed …\nTest for existence of file.\nRepresents the successful result of calling <code>fork</code>\nInitial size of <code>getgrgid_r</code> and <code>getgrnam_r</code> data buffers\nInitial size of <code>getpwuid_r</code> and <code>getpwnam_r</code> data buffers\nGroup identifier\nRepresentation of a Group, based on <code>libc::group</code>\nMaximum length of a host name (not including the …\nMaximum number of iovec structures that one process has …\nUnless otherwise noted, the maximum length, in bytes, of a …\nMaximum number of links to a single file.\nMaximum length of a login name.\nMaximum number of bytes in a terminal canonical input line.\nMinimum number of bytes for which space is available in a …\nThe maximum number of open message queue descriptors a …\nThe maximum number of message priorities supported by the …\nMaximum number of bytes in a filename (not including the …\nMaximum number of simultaneous supplementary group IDs per …\nRemove the directory entry as a normal file, not a …\nA value one greater than the maximum value that the system …\nThe size of a system page in bytes.\nMaximum number of bytes the implementation will store as a …\nMaximum number of bytes that is guaranteed to be atomic …\nSymbolic links can be created.\nMinimum number of bytes of storage actually allocated for …\nRecommended increment for file transfer sizes between the …\nMaximum recommended file transfer size.\nMinimum recommended file transfer size.\nRecommended file transfer buffer alignment.\nMaximum number of attempts made to destroy a thread’s …\nMaximum number of data keys that can be created by a …\nMinimum size in bytes of thread stack storage.\nMaximum number of threads that can be created per process.\nThis is the parent process of the fork.\nVariable names for <code>pathconf</code>\nProcess identifier\nThe maximum number of repeated occurrences of a regular …\nConstant for UID = 0\nMaximum number of realtime signals reserved for …\nTest for read permission.\nRemove the directory entry as a directory, not a normal …\nReal, effective and saved group IDs.\nReal, effective and saved user IDs.\nMaximum number of semaphores that a process may have.\nThe maximum value a semaphore may have.\nMaximum number of queued signals that a process may send …\nThe minimum maximum number of streams that a process may …\nMaximum number of bytes in a symbolic link.\nMaximum number of symbolic links that can be reliably …\nSpecify an offset relative to the current file location.\nSpecify an offset relative to the next location in the …\nSpecify an offset relative to the end of the file.\nSpecify an offset relative to the next hole in the file …\nSpecify an offset relative to the start of the file.\nVariable names for <code>sysconf</code>\nMaximum number of timers per process supported.\nMaximum length of terminal device name.\nThe minimum maximum number of types supported for the name …\nUser identifier\nFlags for <code>unlinkat</code> function.\nRepresentation of a User, based on <code>libc::passwd</code>\nTest for write permission.\nDirective that tells <code>lseek</code> and <code>lseek64</code> what the offset is …\nTest for execute (search) permission.\nThe number of currently available pages of physical memory.\nThe number of processors configured.\nThe number of processors currently online (available).\nThe number of pages of physical memory. Note that it is …\nThe implementation supports the Terminal Characteristics …\nThe implementation supports the C-Language Binding option.\nThe implementation supports the C-Language Development …\nThe implementation supports the FORTRAN Development …\nThe implementation supports the FORTRAN Runtime Utilities …\nThe implementation supports the creation of locales by the …\nThe implementation supports the Batch Environment Services …\nThe implementation supports the Batch Accounting option.\nThe implementation supports the Batch Checkpoint/Restart …\nThe implementation supports the Locate Batch Job Request …\nThe implementation supports the Batch Job Message Request …\nThe implementation supports the Track Batch Job Request …\nThe implementation supports the Software Development …\nThe implementation supports the User Portability Utilities …\nInteger value indicating version of the Shell and …\nThe implementation supports the Advisory Information …\nThe implementation supports asynchronous input and output.\nAsynchronous input or output operations may be performed …\nThe implementation supports barriers.\nThe use of <code>chown</code> and <code>fchown</code> is restricted to a process with\nThe implementation supports clock selection.\nThe implementation supports the Process CPU-Time Clocks …\nThe implementation supports the File Synchronization …\nThe implementation supports the IPv6 option.\nThe implementation supports job control.\nThe implementation supports memory mapped Files.\nThe implementation supports the Process Memory Locking …\nThe implementation supports the Range Memory Locking …\nThe implementation supports memory protection.\nThe implementation supports the Message Passing option.\nThe implementation supports the Monotonic Clock option.\nPathname components longer than {NAME_MAX} generate an …\nThe implementation supports the Prioritized Input and …\nThe implementation supports the Process Scheduling option.\nPrioritized input or output operations may be performed …\nThe implementation supports the Raw Sockets option.\nThe implementation supports read-write locks.\nThe implementation supports realtime signals.\nThe implementation supports the Regular Expression …\nEach process has a saved set-user-ID and a saved …\nThe implementation supports semaphores.\nThe implementation supports the Shared Memory Objects …\nThe implementation supports the POSIX shell.\nThe implementation supports the Spawn option.\nThe implementation supports spin locks.\nThe implementation supports the Process Sporadic Server …\nThe number of replenishment operations that can be …\nThe implementation supports the Synchronized Input and …\nSynchronized input or output operations may be performed …\nThe implementation supports threads.\nThe implementation supports the Thread Stack Address …\nThe implementation supports the Thread Stack Size …\nThe implementation supports the Thread CPU-Time Clocks …\nThe implementation supports the Thread Execution …\nThe implementation supports the Non-Robust Mutex Priority …\nThe implementation supports the Non-Robust Mutex Priority …\nThe implementation supports the Thread Process-Shared …\nThe implementation supports the Robust Mutex Priority …")