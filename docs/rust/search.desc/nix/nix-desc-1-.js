searchState.loadedDescShard("nix", 1, "The implementation supports the Robust Mutex Priority …\nThe implementation supports thread-safe functions.\nThe implementation supports the Thread Sporadic Server …\nThe implementation supports timeouts.\nThe implementation supports timers.\nThe implementation supports the Trace option.\nThe implementation supports the Trace Event Filter option.\nMaximum size of a trace event name in characters.\nThe implementation supports the Trace Inherit option.\nThe implementation supports the Trace Log option.\nThe length in bytes of a trace generation version string …\nMaximum number of times <code>posix_trace_create</code> may be called …\nMaximum number of user trace event type identifiers for a …\nThe implementation supports the Typed Memory Objects …\nThe implementation provides a C-language compilation …\nThe implementation provides a C-language compilation …\nThe implementation provides a C-language compilation …\nThe implementation provides a C-language compilation …\nThis symbol shall be defined to be the value of a …\nInteger value indicating version of this standard …\nThe implementation supports the X/Open Encryption Option …\nThe implementation supports the Issue 4, Version 2 Enhanced\nThe implementation supports the XOpen Legacy Option group.\nThe implementation supports the X/Open Realtime Option …\nThe implementation supports the X/Open Realtime Threads …\nThe implementation supports the Issue 4, Version 2 Shared …\nThe implementation supports the XSI STREAMS Option Group.\nThe implementation supports the XSI option\nInteger value indicating version of the X/Open Portability …\nChecks the file named by <code>path</code> for accessibility according …\nAlarm signal scheduling.\nGet a flags value with all known bits set.\nGet the raw <code>uid_t</code> wrapped by <code>self</code>.\nGet the raw <code>gid_t</code> wrapped by <code>self</code>.\nGet the raw <code>pid_t</code> wrapped by <code>self</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nChange the current working directory of the calling …\nChange the ownership of the file at <code>path</code> to be owned by …\nChange a process’s root directory\nClose a raw file descriptor\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns Uid of calling process. This is practically a more …\nReturns Gid of calling process. This is practically a more …\nDaemonize this process by detaching from the controlling …\nThe intersection of a source flags value with the …\nHome directory\nCreate a copy of the specified file descriptor (see dup(2)…\nCreate a copy of the specified file descriptor using the …\nCreate a new copy of the specified file descriptor using …\nChecks the file named by <code>path</code> for accessibility according …\nReturns effective Uid of calling process. This is …\nReturns effective Gid of calling process. This is …\nEffective UID\nEffective GID\nGet a flags value with all bits unset.\nReplace the current process image with a new one (see …\nReplace the current process image with a new one (see …\nExecute program relative to a directory file descriptor …\nReplace the current process image with a new one and …\nReplace the current process image with a new one and …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nChecks the file named by <code>path</code> for accessibility according …\nChange the current working directory of the process to the …\nChange the ownership of the file referred to by the open …\nChange the ownership of the file at <code>path</code> to be owned by …\nSynchronize the data of a file\nReplace the current process image with a new one (see …\nCreate a new child process duplicating the parent process (…\nLike <code>pathconf</code>, but works with file descriptors instead of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nGet a group by GID.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a user by name.\nGet a group by name.\nCreates <code>Uid</code> from raw <code>uid_t</code>.\nCreates <code>Gid</code> from raw <code>gid_t</code>.\nCreates <code>Pid</code> from raw <code>pid_t</code>.\nGet a user by UID.\nSynchronize changes to a file\nTruncate a file to a specified length\nUser information\nReturns the current directory as a <code>PathBuf</code>\nGet the effective group ID\nGet the effective user ID\nGet the real group ID\nCalculate the supplementary group access list.\nGet the list of supplementary group IDs of the calling …\nGet process group\nGet the group id of the calling process (see getpgrp(3)).\nGet the pid of this process (see getpid(2)).\nGet the pid of this processes’ parent (see getpid(2)).\nGets the real, effective, and saved group IDs.\nGets the real, effective, and saved user IDs.\nGet the process group ID of a session leader getsid(2).\nGet the caller’s thread ID (see gettid(2).\nGet a real user ID\nGroup ID\nGroup ID\nInitialize the supplementary group access list.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturn <code>true</code> if this is the child process of the <code>fork()</code>\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if this is the parent process of the <code>fork()</code>\nReturns true if the <code>Uid</code> represents privileged user - root. …\nDetermines if the file descriptor refers to a valid …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLink one file to another file\nMove the read/write file offset.\nMove the read/write file offset.\nList of Group members\nCreates new directory <code>path</code> with access rights <code>mode</code>.  (see …\nCreates a directory which persists even after process …\nCreates new fifo special file (named pipe) with path <code>path</code> …\nCreates new fifo special file (named pipe) with path <code>path</code> …\nCreates a regular file which persists even after process …\nUsername\nGroup name\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns PID of parent of calling process\nUser password (probably hashed)\nGroup password\nGet path-dependent configurable system variables (see …\nSuspend the thread until a signal is received.\nCreate an interprocess channel.\nLike <code>pipe</code>, but allows setting certain file descriptor …\nChange the root file system.\nRead from a raw file descriptor.\nReal UID\nReal GID\nThe intersection of a source flags value with the …\nSaved UID\nSaved GID\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the effective group ID\nSet the effective user ID\nSet the group identity used for filesystem checks …\nSet the user identity used for filesystem checks …\nSet the group ID\nSet the list of supplementary group IDs for the calling …\nSet a process group ID (see setpgid(2)).\nSets the real, effective, and saved gid. (see setresuid(2))\nSets the real, effective, and saved uid. (see setresuid(2))\nCreate new session and set process group id (see setsid(2)…\nSet the user ID\nPath to shell\nSuspend execution for an interval of time\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCreates a symbolic link at <code>path2</code> which points to <code>path1</code>.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCommit filesystem caches to disk\nCommit filesystem caches containing file referred to by …\nGet configurable system variables (see sysconf(3))\nReturns PID of calling process\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTruncate a file to a specified length\nUser ID\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRemove a directory entry\nRemove a directory entry\nWrite to a raw file descriptor.\nThe PID of the fork’s child process\nCancel an previously set alarm signal.\nSchedule an alarm signal.")