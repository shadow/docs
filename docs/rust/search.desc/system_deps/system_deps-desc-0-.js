searchState.loadedDescShard("system_deps", 0, "<code>system-deps</code> lets you write system dependencies in …\nError used in return value of <code>Config::add_build_internal</code> …\nOne of the <code>Config::add_build_internal</code> closures failed\nAn environment variable in the form of …\nsystem-deps has been asked to internally build a lib, …\nThe library which has been build internally does not match …\nStructure used to configure <code>metadata</code> before starting to …\nAll the system dependencies retrieved by Config::probe.\nSettings have been defined using user defined environment …\nsystem-deps errors\nFailed to read <code>Cargo.toml</code>\nGeneral failure\nInternal library name and if a static library is available …\nRaised when an error is detected in the metadata defined …\nA system dependency\nRaised when dependency defined manually using …\npkg-config error\n<code>pkg-config</code> error\nSettings have been retrieved from <code>pkg-config</code>\nFrom where the library settings have been retrieved\nThe <code>cfg()</code> expression used in <code>Cargo.toml</code> is currently not …\nAdd hook so system-deps can internally build library <code>name</code> …\nReturns a vector of Library::defines of each library, …\nReturns a vector of Library::framework_paths of each …\nReturns a vector of Library::frameworks of each library, …\nReturns a vector of Library::include_paths of each …\nReturns a vector of Library::libs of each library, …\nReturns a vector of Library::link_paths of each library, …\nmacros that should be defined by the compiler\nCreate a new <code>BuildInternalClosureError::Failed</code> …\ndirectories where the compiler should look for frameworks\nframeworks the linker should link on\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Library</code> by probing <code>pkg-config</code> on an internal …\nRetrieve details about a system dependency.\ndirectories where the compiler should look for header files\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if a static library is available on the system\nA vector listing all system dependencies in sorted (for …\nlibraries the linker should link on\ndirectories where the compiler should look for libraries\nName of the library\nName of the library\nCreate a new set of configuration\nProbe all libraries configured in the Cargo.toml …\nFrom where the library settings have been retrieved\nlibrary is statically linked\nlibrary version")