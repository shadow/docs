searchState.loadedDescShard("version_compare", 0, "Rust library to easily compare version numbers with no …\nComparison operators enum.\nEqual (<code>==</code>, <code>=</code>). When version <code>A</code> is equal to <code>B</code>.\nGreater or equal (<code>&gt;=</code>). When version <code>A</code> is greater than or …\nGreater than (<code>&gt;</code>). When version <code>A</code> is greater than <code>B</code> but not …\nLess or equal (<code>&lt;=</code>). When version <code>A</code> is less than or equal …\nLess than (<code>&lt;</code>). When version <code>A</code> is less than <code>B</code> but not equal.\nVersion manifest (configuration).\nNot equal (<code>!=</code>, <code>!</code>, <code>&lt;&gt;</code>). When version <code>A</code> is not equal to <code>B</code>.\nNumeric part, most common in version strings.\nVersion string part enum.\nA text part.\nVersion struct, wrapping a string, providing useful …\nGet the original version string.\nCompare two version number strings to each other.\nCompare this version to the given <code>other</code> version using the …\nCompare two version number strings to each other and test …\nCompare this version to the given <code>other</code> version, and check …\nGet a factor (number) for this comparison operator. These …\nGet the flipped comparison operator.\nGet the comparison operator from Rusts <code>Ordering</code> enum.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Version</code> instance from a version string.\nCreate a <code>Version</code> instance from a version string with the …\nGet a comparison operator by it’s name. Names are …\nGet the comparison operator from Rusts <code>Ordering</code> enum.\nCreate a <code>Version</code> instance from already existing parts\nGet a comparison operator by it’s sign. Whitespaces are …\nUse GNU sort based ordering.\nCheck whether this version has a manifest.\nCheck whether there’s a maximum configured depth.\nWhether to ignore text parts in version strings.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the inverted comparison operator.\nGet the version manifest, if available.\nThe maximum depth of a version number.\nGet the name of this comparison operator.\nGet the opposite comparison operator.\nGet Rust’s ordering for this comparison operator.\nGet a specific version part by it’s <code>index</code>. An error is …\nGet a vector of all version parts.\nSet the version manifest.\nGet the sign for this comparison operator.")