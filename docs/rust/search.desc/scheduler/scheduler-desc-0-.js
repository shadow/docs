searchState.loadedDescShard("scheduler", 0, "Scheduler for Shadow discrete-event simulations.\nSupports iterating over all hosts assigned to this thread.\nA wrapper for different host schedulers. It would have …\nA scope for any task run on the scheduler.\nGet the core affinity of the current thread, as set by the …\nFor each <code>Host</code>, calls <code>f</code> with the host. The <code>Host</code> must be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJoin all threads started by the scheduler.\nThe maximum number of threads that will ever be run in …\nRun the closure on all threads. The closure is given an …\nRun the closure on all threads. The closure is given an …\nRun the closure on all threads. The closure is given an …\nCreate a scope for any task run on the scheduler. The …\nA thread-per-core host scheduler.\nA thread-per-host host scheduler.\nSupports iterating over all hosts assigned to this thread. …\nA wrapper around the work pool’s scoped runner.\nA host scheduler.\nSee <code>crate::HostIter::for_each</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>crate::Scheduler::join</code>.\nA new host scheduler with threads that are pinned to the …\nSee <code>crate::Scheduler::parallelism</code>.\nSee <code>crate::SchedulerScope::run</code>.\nSee <code>crate::SchedulerScope::run_with_data</code>.\nSee <code>crate::SchedulerScope::run_with_hosts</code>.\nSee <code>crate::Scheduler::scope</code>.\nSupports iterating over all hosts assigned to this thread. …\nA wrapper around the work pool’s scoped runner.\nA host scheduler.\nSee <code>crate::HostIter::for_each</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>crate::Scheduler::join</code>.\nA new host scheduler with logical processors that are …\nSee <code>crate::Scheduler::parallelism</code>.\nSee <code>crate::SchedulerScope::run</code>.\nSee <code>crate::SchedulerScope::run_with_data</code>.\nSee <code>crate::SchedulerScope::run_with_hosts</code>.\nSee <code>crate::Scheduler::scope</code>.")