searchState.loadedDescShard("cc", 0, "A library for Cargo build scripts to compile a set of …\nA builder for compilation of a native library.\nRepresents an internal error that occurred, with an …\nConfiguration used to represent an invocation of a C …\nAdd a flag to the invocation of the ar\nConfigures the tool used to assemble archives.\nReturns the default set of arguments to the compiler …\nAdd a flag that will only be used with assembly files.\nDefine whether debug information should be emitted for …\nDefine whether metadata should be emitted for cargo …\nDefine whether compiler output (to stdout) should be …\nDefine whether compile warnings should be emitted for …\nReturns the compiler command in format of CC environment …\nSet CUDA host compiler.\nReturns the compiler flags in format of CFLAGS environment …\nRun the compiler, generating the file <code>output</code>\nRun the compiler, generating intermediate files, but …\nConfigures the compiler to be used to produce output.\nSet C++ support.\nSet the standard library to link against when compiling …\nForce the C++ compiler to use the specified standard …\nSet CUDA C++ support.\nLink CUDA run-time.\nConfigures whether the compiler will emit debug …\nSpecify a <code>-D</code> variable with an optional value.\nDefine whether metadata should be emitted for cargo to …\nReturns the set of environment variables needed for this …\nRun the compiler, returning the macro-expanded version of …\nSet extra warnings flags.\nAdd a file which will be compiled\nAdd files which will be compiled\nAdd an arbitrary flag to the invocation of the compiler\nAdd an arbitrary flag to the invocation of the compiler if …\nConfigures whether the compiler will emit instructions to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the archiver (ar) that’s in use for this …\nGet the compiler that’s in use for this configuration.\nGet the files which will be compiled\nGet the ranlib that’s in use for this configuration.\nConfigures the host assumed by this configuration.\nAdd a directory to the <code>-I</code> or include path for headers\nAdd multiple directories to the <code>-I</code> include path.\nConfigure whether cc should automatically inherit …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun the compiler to test if it accepts the given flag.\nWhether the tool is Clang-like.\nWhether the tool is <code>clang-cl</code>-based MSVC-like.\nWhether the tool is GNU Compiler Collection-like.\nWhether the tool is MSVC-like.\nAdds a native library modifier that will be added to the …\nConstruct a new instance of a blank set of configuration.\nDisables the generation of default compiler flags. The …\nAdd an arbitrary object file to link in\nAdd arbitrary object files to link in\nConfigures the optimization level of the generated object …\nConfigures the optimization level of the generated object …\nConfigures the output directory where all object files and …\nReturns the path for this compiler.\nConfigures whether the compiler will emit position …\nConfigures the tool used to index archives.\nRemoves a compiler flag that was added by <code>Build::flag</code>.\nSet the <code>-shared</code> flag.\nConfigure whether *FLAGS variables are parsed using <code>shlex</code>, …\nConfigures whether the /MT flag or the /MD flag will be …\nSet the <code>-static</code> flag.\nSpecify the C or C++ language standard version.\nConfigures the <code>rustc</code> target this configuration will be …\nConverts this compiler into a <code>Command</code> that’s ready to be …\nRun the compiler, generating the file <code>output</code>\nRun the compiler, generating intermediate files, but …\nThis will return a result instead of panicking; see …\nAdd flags from the specified environment variable.\nGet the archiver that’s in use for this configuration.\nGet the compiler that’s in use for this configuration.\nGet the ranlib that’s in use for this configuration.\nConfigures whether the Procedure Linkage Table is used for …\nSet warnings flags.\nSet warnings into errors flag.\nA helper module to looking for windows-specific tools:\nVisual Studio 12 (2013)\nVisual Studio 14 (2015)\nVisual Studio 15 (2017)\nVisual Studio 16 (2019)\nVisual Studio 17 (2022)\nA version of Visual Studio\nAttempts to find a tool within an MSVC installation using …\nSimilar to the <code>find</code> function above, this function will …\nFind the most recent installed version of Visual Studio\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")