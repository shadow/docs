searchState.loadedDescShard("shadow_rs", 0, "The Shadow network simulator.\nThe core infrastructure needed to configure and run the …\ncbindgen:ignore\nProcess management and emulation of Linux behaviour.\nLog a message once at level <code>lvl_once</code>, and any later log …\nLog a message once at level <code>lvl_once</code> for each distinct …\nThe network simulation.\nThe main entrypoint to Shadow.\nMiscellaneous utilities that are used by Shadow.\nShadow’s configuration and cli parsing code using serde …\nUtilities for getting system resource usage.\nCode for processing parsed Shadow configurations. This …\nOptions contained in a configuration file.\nShadow configuration options after processing command-line …\nA trait for <code>Option</code>-like types that can be flattened into a …\nThis wrapper type allows cli options to specify “null” …\nThe enum variants here have an extra level of indirection …\nProcess arguments\nDownstream bandwidth capacity of the host\nUpstream bandwidth capacity of the host\nThe simulated time that ends Shadow’s high network …\nThe file’s compression format\nPath to the Shadow configuration file. Use ‘-’ to read …\nPath to store simulation output\nPause after starting any processes on the comma-delimited …\nEnvironment variables passed when executing this process\nThe expected final state of the process. Shadow will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPause to allow gdb to attach\nThe network topology graph\nInterval at which to print heartbeat messages\nAmount of time between heartbeat messages for this host\nList of information to show in the host’s heartbeat …\nLog level at which to print host statistics\nThe queueing discipline to use at the network interface\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIP address to assign to the host\nWhen true, log error-level messages to stderr in addition …\nLog level of output written on stdout. If Shadow was built …\nLog level at which to print node messages\nMax amount of execution-time latency allowed to accumulate …\nModel syscalls and VDSO functions that don’t block as …\nNetwork graph node ID to assign the host to\nHow many parallel threads to use to run the simulation. A …\nParses a string as a list of arguments following the shell…\nThe path to the file\nHow much data to capture per packet (header and payload) …\nShould shadow generate pcap files?\nShow the simulation progress on stderr\nIf set, overrides the automatically calculated minimum …\nThe host scheduler implementation, which decides how to …\nInitialize randomness using seed N\nExit after running shared memory cleanup routine\nExit after printing build information\nExit after printing the final configuration\nThe signal that will be sent to the process at …\nThe simulated time at which to send a <code>shutdown_signal</code> …\nEnable receive window autotuning\nInitial size of the socket’s receive buffer\nEnable send window autotuning\nInitial size of the socket’s send buffer\nThe simulated time at which to execute the process\nThe simulated time at which simulated processes are sent a …\nLog the syscalls for each process to individual “strace…\nPath to recursively copy during startup and use as the …\nEasier to use than <code>Into&lt;Option&lt;T&gt;&gt;</code> since <code>Option</code> has a lot …\nSimulated latency of an unblocked syscall. For efficiency …\nSimulated latency of a vdso “syscall”. For efficiency …\nPin each thread and any processes it executes to the same …\nUpdate the minimum runahead dynamically throughout the …\nUse the MemoryManager in memory-mapping mode. This can …\nUse the rust TCP implementation\nCount object allocations and deallocations. If disabled, …\nPreload our libc library for all managed processes for …\nPreload our OpenSSL crypto library for all managed …\nPreload our OpenSSL RNG library for all managed processes …\nUse the SCHED_FIFO scheduler. Requires CAP_SYS_NICE. See …\nWhen routing packets, follow the shortest path rather than …\nCount the number of occurrences for individual syscalls\nEach worker thread will spin in a <code>sched_yield</code> loop while …\nReplace unset (<code>None</code>) values of <code>base</code> with values from …\nReplace unset (<code>None</code>) values of <code>base</code> with values from …\nReplace unset (<code>None</code>) values of <code>base</code> with values from …\nReplace unset (<code>None</code>) values of <code>base</code> with values from …\nController methods that are accessed by the manager.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the core ID from …\nCount the number of physical cores available. Uses …\nGet the CPUs in a node from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the nodes from <code>/sys/devices/system/node/possible</code>.\nGet the online CPUs from <code>/sys/devices/system/cpu/online</code>.\nTake an input of a list of ranges like ‘1-3,5,7-10’ …\nA logger specialized for Shadow. It attaches simulation …\nReturns the argument unchanged.\nInitialize the Shadow logger.\nCalls <code>U::from(self)</code>.\nIf the maximum log level has not yet been set, returns …\nWhen disabled, the logger thread is notified to write each …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMemory usage information parsed from ‘/proc/meminfo’. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCollects some of the fields from ‘/proc/meminfo’. This …\nDecides on the runahead for the next simulation round (the …\nReturns the argument unchanged.\nGet the runahead for the next round.\nCalls <code>U::from(self)</code>.\nIf dynamic runahead is enabled, will compare and update …\nThe simulation configuration after processing the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimulation statistics to be accessed by a single thread.\nSimulation statistics to be accessed by multiple threads.\nAdd stats from a local object to a shared object. May …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMay reset fields of <code>stats</code>.\nData for an event. Different event types will contain …\nThe event data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA new local event, which is an event that was generated …\nA new packet event, which is an event for packets arriving …\nA queue of <code>Event</code>s ordered by their times.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe time of the next <code>Event</code> (the time of the earliest event …\nPop the earliest <code>Event</code> from the queue.\nPush a new <code>Event</code> on to the queue.\nMostly for interoperability with C APIs. In Rust code that …\nTwo <code>TaskRef</code>s are equal if they point to the same task …\nExecutes the task.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNo value.\nNo value.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nDestroys this reference to the <code>Task</code>, dropping the <code>Task</code> if …\nCreate a new reference-counted task that can only be …\nCreate a new reference-counted task that may be executed …\nWorker context, containing ‘global’ information for …\nGet the pid watcher.\nClear the currently-active Process.\nClear the currently-active Thread.\nEnable object counters. Should be called near the …\nEvent queues for each host. This should only be used to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether currently running on a live Worker.\nShadow allows configuration of a “bootstrapping” …\nMaximum time that the current event may run ahead to.\nPush a packet to the destination host’s event queue. …\nSafety\nSet the currently-active Host.\nSet the currently-active Process.\nSet the currently-active Thread.\nClear the currently-active Host.\nUpdate the status logger. If the status logger is …\nRun <code>f</code> with a reference to the current Host, or return None …\nRun <code>f</code> with a reference to the current <code>Process</code>, or return …\nRun <code>f</code> with a reference to the current …\nRun <code>f</code> with a reference to the current <code>Thread</code>, or return …\nRun <code>f</code> with a reference to the global DNS.\nID of this thread’s Worker, if any.\nAn Address structure holds information used to identify …\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nTurns the IPv4 address into a newly allocated string that …\nChecks if the given addresses are equal. This function is …\nCreate a new Address structure with the given IP and …\nRetrieve the host-order integer version of this address …\nRetrieves the dot-and-decimal string representation of the …\nRetrieves the hostname of this address. The caller does …\nRetrieve the network-order integer version of this address …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module provides several <em>Context</em> structs, intended to …\nLinux file descriptors and file descriptions (equivalent …\nAn emulated Linux system.\nA thread of a managed process.\nAccess and manage memory of a plugin process.\nAn emulated Linux process.\nCompatibility wrappers for C-style event listeners.\nAn emulated Linux thread.\nRepresent the “current” <code>Host</code>.\nRepresent the “current” <code>Host</code> and <code>Process</code>.\nRepresent the “current” <code>Host</code>, <code>Process</code>, and <code>Thread</code>.\nShadow’s C code doesn’t know about contexts. In places …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplit into a <code>&amp;Process</code> and a <code>HostContext</code>. Useful e.g. for …\nSplit into a <code>&amp;Thread</code> and a <code>ProcessContext</code>. Useful e.g. for …\nAdd the given process to the context.\nAccounts for time executing code on the native CPU, …\nAccount for <code>native_delay</code> spent natively executing code.\nCalculate the simulated delay until this CPU is ready to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>threshold</code>: if None, never report a delay. Otherwise only …\nConfigure the current time.\nHas been initialized and it is now OK to unblock any …\nA child process had an event reportable via e.g. waitpid.\nUser already called close.\nA compatibility wrapper around an <code>OpenFile</code> or …\nRepresents a counted reference to a legacy file object. …\nA file descriptor that reference an open file. Also …\nA wakeup operation occurred on a futex.\nA wrapper for any type of file object.\nThese are flags that should generally not change …\nWraps an immutably borrowed <code>File</code>. Created from <code>File::borrow</code>…\nWraps a mutably borrowed <code>File</code>. Created from …\nFile-related signals that listeners can watch for.\nFlags representing the state of a file. Listeners can …\nThese are flags that can potentially be changed from the …\nUsed to track how many descriptors are open for a …\nRepresents a POSIX file description, or a Linux <code>struct file</code>…\nCan be read, i.e. there is data waiting for user.\nThe read buffer now has additional data available to read.\nA listening socket is allowing connections. Only …\nCan be written, i.e. there is available buffer space.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nWill close the inner <code>File</code> object if this is the last …\nClose the descriptor. The <code>host</code> option is a legacy option …\nClose the descriptor, and if this is the last descriptor …\nClose the file. The <code>host</code> option is a legacy option for …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDuplicate the descriptor, with both descriptors pointing …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe new descriptor takes ownership of the reference to the …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nReturns a tuple of the <code>FileStatus</code> and any remaining flags.\nReturns a tuple of the <code>FileMode</code> and any remaining flags, …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nTypes for emitting and subscribing to <code>File</code> events.\nDoes not increment the legacy file’s ref count, but will …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nSafety\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nA buffer for files that need to share a buffer with other …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA handle for a file descriptor.\nThe handle is not valid.\nMap of file handles to file descriptors. Typically owned …\nPOSIX requires fds to be assigned as <code>libc::c_int</code>, so we can…\nDeregister the descriptor with the given fd handle and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the descriptor at <code>idx</code>, if any.\nGet the descriptor at <code>idx</code>, if any.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>Some</code> if <code>fd</code> is less than <code>FD_MAX</code>. Can be used in …\nRegister a descriptor and return its fd handle. Equivalent …\nRegister a descriptor with a given fd handle and return …\nRegister a descriptor and return its fd handle. If the …\nRemove and return all descriptors.\nRemove and return all descriptors in the range. If you …\nExecutes an epoll control operation on the target file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA specified event source that passes a state and the …\nHandles for event source listeners.\nAdd a listener. The filter applies only to state changes, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Pipe</code>. The new pipe must be initialized using …\nThe buffer now has additional data available to read.\nBuffer-related signals that listeners can watch for.\nThe buffer has no readers.\nThe buffer has no writers.\nThere is data waiting in the buffer.\nA handle that signifies that the owner is acting as a …\nThere is available buffer space.\nSee <code>ReaderHandle</code>.\nRegister as a reader. The <code>ReaderHandle</code> must be returned to …\nRegister as a writer. The <code>WriterHandle</code> must be returned to …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nArguments for <code>Socket::recvmsg()</code>.\nReturn values for <code>Socket::recvmsg()</code>.\nArguments for <code>Socket::sendmsg()</code>.\nSocket address to send the message to.\nThe socket address of the received message.\nThe number of control data bytes read.\nBuffer in plugin memory containg message control data.\nBuffer in plugin memory to store the message control data.\nSend flags.\nRecv flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>IoVec</code> buffers in plugin memory containing the message data.\n<code>IoVec</code> buffers in plugin memory to store the message data.\nMessage flags.\nThe return value for the syscall. Typically is the number …\nThe name is already in use.\nThe name was not found in the address map.\nNames in the ephemeral name range are all in use.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUseful for getting a unique integer handle for a socket, …\nEqual only if they are the same type and point to the same …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a hash for the socket based on its address, and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the <code>c::TCP</code> pointer as a <code>c::LegacyFile</code> pointer.\nGet the <code>c::TCP</code> pointer as a <code>c::LegacySocket</code> pointer.\nGet the <code>c::TCP</code> pointer.\nGet a canonical handle for this socket. We use the address …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTakes ownership of the <code>TCP</code> reference.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA unix socket. The <code>UnixSocket</code> is the public-facing API, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nArm the timer by setting its expiration time and interval, …\nDisarm the timer so that it no longer fires expiration …\nReturns the argument unchanged.\nReturns the relative duration over which the timer has …\nReturns the relative duration until the next expiration …\nCalls <code>U::from(self)</code>.\nCreates a new <code>TimerFd</code> object that internally sets up a …\nAn owned reference to a <code>Futex</code>.\nA map of <code>ManagedPhysicalMemoryAddr</code> to <code>Futex</code>.\nAdd the futex to the table. If the futex already exists in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTakes ownership of the reference.\nA simulated Host.\nImmutable information about the Host.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the packet device that handles packets for the given …\nReturns <code>true</code> if the host has a process that contains the …\nInformation about the Host. Made available as an Arc for …\nReturns <code>None</code> if there is no such interface.\nReturns <code>None</code> if there is no such interface.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLocks the Host’s shared memory, caching the lock …\nSafety\nCall to trigger the forwarding of packets from the router …\nCall to trigger the forwarding of packets from the network …\nPaths of libraries that should be preloaded into managed …\nRemove the given process from the Host, if it exists.\nReturns the Session ID for the given process group ID, if …\nBorrow the set of processes. Generally this should only be …\nThe unprotected part of the Host’s shared memory.\nShut down the host. This should be called while <code>Worker</code> has …\nReturns the specified thread if it exists. If you already …\nTimestamp Counter emulation for this Host. It ticks at the …\nPanics if there is still an outstanding reference returned …\nBlocked on a SyscallCondition.\nThe thread’s process has exited.\nThe native thread has exited with the given code.\nThe ManagedThread’s state after having been allowed to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ManagedThread</code> panics if dropped while the underlying …\nExecute the specified <code>clone</code> syscall in <code>self</code>, and use …\nMake the specified syscall on the native thread.\nMemory allocated by Shadow, in a remote address space.\nProvides accessors for reading and writing another process…\nAn object implementing std::io::Read and std::io::Seek for …\nAn object implementing std::io::Write and std::io::Seek for\nAn immutable reference to a slice of plugin memory. …\nA mutable reference to a slice of plugin memory. …\nSimilar to <code>read</code>, but saves a copy if you already have a <code>dst</code>…\nCopies a NULL-terminated string starting from the …\nWrites the memory from a local copy. If <code>src</code> doesn’t …\nCall to dispose of the reference while writing back the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a <code>cstr</code> from the reference. Fails with <code>ENAMETOOLONG</code> if …\nWhether the internal MemoryMapper has been initialized.\nInitialize the MemoryMapper, allowing for more efficient …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a reference to the given memory, copying to a …\nReturns a mutable reference to the given memory. If the …\nReturns a mutable reference to the given memory. If the …\nReturns a reference to the memory from the beginning of …\nAllocate memory in the current active process. Must be …\nSafety\nDisposes of the reference <em>without</em> writing back the …\nWhich process’s address space this MemoryManager manages.\nPointer to the allocated memory.\nReads the memory into a local copy. <code>memory_ref</code> is …\nCreates a std::io::Read accessor for the specified plugin …\nWrites a local value <code>val</code> into the memory at <code>ptr</code>.\nCreate a write accessor for the specified plugin memory.\nThe priority used by the fifo qdisc to choose the next …\nRepresents a network device that can send and receive …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new network interface for <code>host_id</code> with the …\nDisassociate all bound sockets and remove sockets from the …\nA handle for a socket association with a network …\nRepresents a network namespace. Can be thought of as …\nAssociate the socket with any applicable network …\nClean up the network namespace. This should be called …\nDisassociate the socket associated using the local and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a random port in host byte order.\nReturns <code>None</code> if there is no such interface.\nReturns <code>None</code> if there is no such interface.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nA simulated process.\nVirtual pid of a shadow process\nA process that is currently runnable.\nThe process was killed by Shadow rather than exiting “…\nA process that has exited.\nAdds a new thread to the process and schedules it to run. …\nDeprecated wrapper for <code>RunnableProcess::add_thread</code>\nBorrows a reference to the internal <code>RunnableProcess</code> if <code>self</code>…\nBorrows a reference to the internal <code>ZombieProcess</code> if <code>self</code> …\nGet process’s “dumpable” state, as manipulated by …\nConstruct a siginfo containing information about how the …\nSignal that will be sent to parent process on exit. …\nReturns a dynamically borrowed reference to the first live …\nDeprecated wrapper for …\nThis cleans up memory references left over from legacy C …\nDeprecated wrapper for …\nThis cleans up memory references left over from legacy C …\nDeprecated wrapper for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns what the <code>ProcessId</code> would be of a <code>Process</code> whose …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeprecated wrapper for <code>RunnableProcess::memory_borrow</code>\nDeprecated wrapper for <code>RunnableProcess::memory_borrow_mut</code>\nDeprecated wrapper for <code>RunnableProcess::native_pid</code>\nCreate a new <code>Process</code>, forked from <code>self</code>, with the thread …\nDeprecated wrapper for …\nDeprecated wrapper for …\nProcess that can reap this zombie process, if any.\nResume execution of <code>tid</code> (if it exists). Should only be …\nResource usage, as returned e.g. by the <code>getrusage</code> syscall.\nSet process’s “dumpable” state, as manipulated by …\nShared memory for this process.\nDeprecated wrapper for <code>RunnableProcess::shmem</code>\nSend the signal described in <code>siginfo</code> to <code>process</code>. …\nSee <code>RunnableProcess::signal</code>.\nSpawn a new process. The process will be runnable via …\nSpawn a <code>ManagedThread</code> corresponding to the given <code>exec</code> …\nTerminate the Process.\nDeprecated wrapper for …\nDeprecated wrapper for <code>RunnableProcess::thread_borrow</code>\nUpdate <code>self</code> to complete an <code>exec</code> syscall from thread <code>tid</code>, …\nIf strace logging is disabled, this function will do …\nDeprecated wrapper for <code>RunnableProcess::with_strace_file</code>\nAn object that listens for status changes.\nCreate an owned reference from <code>ptr</code>. Reference count is …\nReturns the argument unchanged.\nCalled when a transition (bit flip) occurred on at least …\nCalls <code>U::from(self)</code>.\nCreate a <code>StatusListener</code> with the given notification …\nSet the status bits that we should monitor for transitions …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTypes used in emulating syscalls.\nAn owned syscall condition.\nAn immutable reference to a syscall condition.\nA mutable reference to a syscall condition.\nBorrows from a C pointer. i.e. doesn’t increase the ref …\nBorrows from a C pointer. i.e. doesn’t increase the ref …\n“Steal” from a C pointer. i.e. doesn’t increase ref …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n“Steal” the inner pointer without unref’ing it.\nConstructor.\nCreate a new syscall condition that triggers a wakeup on …\nA marker type for indicating there are no types left in …\nA formatting wrapper for six syscall arguments.\nA formatting wrapper for the syscall result.\nA syscall argument or return value. It implements <code>Display</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor logging unknown syscalls.\nFormat and write the syscall.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDid the last syscall result in <code>SyscallError::Blocked</code>? If …\nAnalogous to <code>libc::iovec</code>.\nA reader which reads data from <code>IoVec</code> buffers of plugin …\nA writer which writes data to <code>IoVec</code> buffers of plugin …\nAnalogous to <code>libc::msghdr</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead an array of strings, each of which with max length …\nRead a plugin’s array of <code>libc::iovec</code> into a <code>Vec&lt;IoVec&gt;</code>.\nRead a plugin’s <code>libc::msghdr</code> into a <code>MsgHdr</code>.\nUsed to update a <code>libc::msghdr</code>. Only writes the <code>libc::msghdr</code>…\nWrites <code>val</code> to <code>val_ptr</code>, but will only write a partial value …\nWrites the socket address into a buffer at <code>plugin_addr</code> …\nWrites the socket address into a buffer at <code>plugin_addr</code> …\nDisplays a byte buffer with a specified length.\nDisplays a nul-terminated string syscall argument.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWe don’t have the result yet.\nDone executing the syscall; ready to let the plugin thread …\nContains the error value\nWrapper around a <code>ForeignPtr</code> that encapsulates its size and …\nDirect plugin to make the syscall natively.\nContains the success value\nReturns the condition that the syscall is blocked on.\nCast to type <code>U</code>. Fails if the total size isn’t a multiple …\nCast to u8. Infallible since <code>size_of&lt;u8&gt;</code> is 1.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of items pointed to.\nCreates a typed pointer. Note though that the pointer <em>isn</em>…\nRaw foreign pointer.\nReturn a slice of this pointer.\nBlocked on a syscall.\nThe process has exited.\nThe thread has exited with the given code.\nThe thread’s state after having been allowed to execute …\nA virtual Thread in Shadow. Currently a thin wrapper …\nFrees a pointer previously returned by <code>malloc_foreign_ptr</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the given thread is its thread group (aka …\nAllocates some space in the plugin’s memory. Use …\nMinimal wrapper around the native managed thread.\nNatively execute brk(2) on the given thread.\nNatively execute close(2) on the given thread.\nNatively execute mmap(2) on the given thread.\nNatively execute mmap(2) on the given thread.\nNatively execute mremap(2) on the given thread.\nNatively execute munmap(2) on the given thread.\nNatively execute open(2) on the given thread.\nSets the <code>clear_child_tid</code> attribute as for …\nShared memory for this thread.\nUpdate this thread to be the new thread group leader as …\nCreate a new <code>Thread</code>, wrapping <code>mthread</code>. Intended for use by …\nActivate the timer so that it starts issuing <code>on_expire()</code> …\nReturns the number of timer expirations that have occurred …\nDeactivate the timer so that it does not issue <code>on_expire()</code> …\nReturns the number of timer expirations that have occurred …\nReturns the currently configured timer expiration interval …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Timer that directly executes <code>on_expire</code> on …\nReturns the remaining time until the next expiration if …\nSafety\nSafety\nSafety\nCreate a new Timer that synchronously executes <code>task</code> on …\nTool for assigning IP addresses to graph nodes.\nA network graph containing the petgraph graph and a map …\nNetwork characteristics for a path between two nodes.\nRouting information for paths between nodes.\nA graph edge.\nA graph node.\nGet an unused address and assign it to a node.\nAssign an address to a node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the node that an address is assigned to.\nGet all nodes with assigned addresses.\nIncrement the number of packets sent from one node to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLatency in nanoseconds.\nGet the network graph as a string.\nLog the number of packets sent between nodes.\nPacket loss as fraction.\nGet properties for the path from one node to another.\nCopy the payload to the managed process. Even if this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTransfers ownership of the given c_ptr reference into a …\nCopy the packet payload to a buffer. Will truncate if the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransfers ownership of the inner c_ptr reference to the …\nSet the packet payload. Will panic if the packet already …\nSet TCP headers for this packet. Will panic if the packet …\nSet UDP headers for this packet. Will panic if the packet …\nSpecifies a throughput limit the relay should enforce when …\nA <code>Relay</code> forwards <code>PacketRc</code>s between <code>PacketDevice</code>s, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Relay</code> that will forward <code>PacketRc</code>s following …\nNotify the relay that its packet source now has packets …\nA router assists with moving packets between hosts across …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new router for a host that will help route …\nRoutes the packet from the virtual internet into our CoDel …\nMain entry point for the simulator.\nA pointer to an object that is safe to dereference from …\nA trait we can use as a compile-time check to make sure …\nA trait we can use as a compile-time check to make sure …\nRuntime memory error checking to help catch errors that C …\nHelper for tracking the number of allocated objects.\nAn event/listener framework to allow listeners to …\nReturns <code>true</code> if <code>eq_ignore_ascii_case</code> returns <code>true</code> on all <code>u8</code>\nCopy the contents of the <code>src</code> directory to a new directory …\nA counter that can be used to count frequencies of a set …\nIf debug assertions are enabled, panics if <code>FD_CLOEXEC</code> is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>&amp;[i8]</code> to <code>&amp;[u8]</code>. Useful when interacting with C …\nInject <code>injected_preloads</code> into the environment <code>envv</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a pointer that may only be accessed when the …\nCreate a pointer that may only be accessed when the host …\nHelper for converting a PathBuf to a CString\nGet the pointer.\nGet the pointer without checking the active host.\nGet the pointer.\nGet the return code for a process that exited by the given …\nConvert a <code>&amp;[u8]</code> to <code>&amp;[i8]</code>. Useful when interacting with C …\nTypes for parsing/deserializing unit values.\nCheck that the plugin path is executable under Shadow.\nA queue of bytes that supports reading and writing stream …\nA wrapper type that holds either <code>Bytes</code> or <code>BytesMut</code>.\nThe types of data that are supported by the <code>ByteQueue</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the queue has bytes.\nReturns true if the queue has data/chunks, which may …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of bytes in the queue. If the queue has 0 …\nPeek data from the queue. Only a single type of data will …\nPop data from the queue. Only a single type of data will …\nPop a single chunk of data from the queue. The <code>size_hint</code> …\nPush a chunk of stream or packet data onto the queue.\nPush packet data onto the queue in a single chunk. Exactly …\nPush stream data onto the queue. The data may be merged …\nA queue of events (functions/closures) which when run can …\nEmits events to subscribed listeners.\nA handle is used to stop listening for events. The …\nAdd an event to the queue.\nAdd a listener.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an empty event queue.\nNotify all listeners.\nA convenience function to create an EventQueue, allow the …\nProcess all of the events in the queue (and any new events …\nStop listening for new events. Equivalent to dropping the …\nUtility for monitoring a set of child pid’s, calling …\nFork a child and register it. Uses <code>fork</code> internally; it …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a ChildPidWatcher. Spawns a background thread, …\nCall <code>callback</code> from another thread after the child <code>pid</code> has …\nRegister interest in <code>pid</code>.\nUnregisters a callback. After returning, the corresponding …\nUnregister the pid. After unregistration, no more …\nThe main counter object that maps individual keys to count …\nCombines two counters by adding all values for all keys of …\nAdd all values for all keys in <code>other</code> to this counter.\nIncrement the counter value by one for the key given by id.\nIncrement the counter value by the given value for the key …\nReturns a string representation of the counter in the form …\nReturns the argument unchanged.\nReturns the counter value for the key given by id, or 0 if …\nCalls <code>U::from(self)</code>.\nInitializes a new counter map that starts with no keys.\nSets the counter value to the given value for the key …\nCombines two counters by subtracting all values for all …\nSubtract all values for all keys in <code>other</code> from this …\nDecrement the counter value by one for the key given by id.\nDecrement the counter value by the given value for the key …\nWriter adapter which limits the bytes written to an …\nReturns the argument unchanged.\nGets a mutable reference to the underlying writer.\nGets a reference to the underlying writer.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Give</code>, returning the wrapped writer.\nReturns the number of bytes that can be written before …\nSets the number of bytes that can be read before this …\nDescribes modifications of an IntervalMap after …\nMutates the map so that the given range maps to nothing, …\nThe upper bound of the range (exclusive).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert range from <code>start</code> to <code>end</code>, inclusive, mapping that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns iterator over all intervals keys and their values, …\nReturns iterator over all interval keys and their values, …\nReturns iterator over all intervals keys, in sorted order.\nThe lower bound of the range (inclusive).\nAn event source stored by a <code>LegacyFile</code>.\nHelper function to initialize and run a global …\nA <code>HashSet</code> that only allows insertions and uses interior …\nReturns the argument unchanged.\nInsert <code>val</code> into the set. Returns <code>false</code> if <code>val</code> had …\nCalls <code>U::from(self)</code>.\nWrite the packet bytes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA new packet capture writer. Each packet (header and …\nWrite a packet from a buffer.\nWrite a packet without requiring an intermediate buffer.\nIntended as a drop-in-replacement for glib’s GTimer.\nTotal time elapsed while the timer has been running.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate timer, which starts running.\nStart the timer, which must not already be running.\nStop the timer, which must already be running.\nRepresents a single line in /proc/[pid]/maps.\nThe “path” of where a region is mapped from.\nWhether a region of memory is shared.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads and parses the contents of a /proc/[pid]/maps file\nParses the contents of a /proc/[pid]/maps file\nA container for any type of socket address.\nA Unix socket address. Typically will be used as an owned …\nIf the socket address represents an abstract address, …\nIf the socket address represents a valid ipv4 socket …\nIf the socket address represents a valid ipv6 socket …\nGet a mutably borrowed unix socket address.\nIf the socket address represents a valid netlink socket …\nIf the socket address represents a pathname address, …\nA pointer to the socket address. Some bytes may be …\nGet a pointer to the unix socket address. All fields of …\nGet a borrowed unix socket address.\nThe socket address as a slice of bytes. Some bytes may be …\nIf the socket address represents a valid unix socket …\nGet the socket protocol family. Will return <code>None</code> if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nGet a new <code>SockaddrStorage</code> with a copy of the ipv4 socket …\nGet a new <code>SockaddrStorage</code> with a copy of the ipv6 socket …\nGet a new <code>SockaddrStorage</code> with a copy of the netlink …\nSafety\nGet a new <code>SockaddrStorage</code> with a copy of the unix socket …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an owned unix socket address.\nIs the unix socket address unnamed? On Linux, unnamed unix …\nGet a new <code>SockaddrUnix</code> for a <code>libc::sockaddr_un</code>. The …\nGet a new <code>SockaddrUnix</code> with the given abstract address …\nGet a new <code>SockaddrUnix</code> with the given path. Will return …\nGet a new unnamed unix socket address.\nThe status bar’s internal state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate and start drawing the status bar.\nCreate and start printing the status.\nStop and remove the status bar.\nStop printing the status.\nUpdate the status bar’s internal state. The status will …\nBackport of std::io::Seek::stream_len from Rust nightly.\nA throughput in bits-per-second.\nA number of bytes.\nThe prefix of a unit value denoting magnitude. Common …\nCommon SI prefixes (including base-2 prefixes since they’…\nCommon SI prefixes larger than the base unit (including …\nAn amount of time. Should only use the time prefix types (…\nTime units, which we pretend are prefixes for …\nTime units larger than the base unit, which we pretend are …\nA unit containing a value (ex: an integer), a prefix (ex: …\nAn integer conversion factor.\nA floating point conversion factor.\nConvert value to a different prefix, but return an error …\nConvert value to a different prefix, even if it loses …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current prefix.\nThe magnitude of this prefix relative to other prefixes of …\nThe value of the unit in the size of its current prefix.")