searchState.loadedDescShard("asm_util", 0, "cbindgen:ignore\nAn x86-64 cpuid instruction.\nLength in bytes of an x86-64 cpuid instruction.\nResult of the <code>cpuid</code> instruction.\nrdrand flag in a <code>cpuid(RDRAND_LEAF)</code> result.\ncpuid leaf for finding the rdrand bit.\ncpuid leaf 1 doesn’t have sub-leaves.\nrdseed flag in a <code>cpuid_count(RDSEED_LEAF, RDSEED_SUB_LEAF)</code> …\ncpuid leaf for finding the rdseed bit.\ncpuid sub-leaf for finding the rdseed bit.\nExecute the cpuid instruction for the given leaf and …\nEAX register.\nEBX register.\nECX register.\nEDX register.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether <code>ip</code> points to a cpuid instruction.\nWhether the current CPU supports the <code>rdrand</code> instruction.\nWhether the current CPU supports the <code>rdseed</code> instruction.\nEmulates an x86-64 processor’s timestamp counter, as …\nUpdates registers to reflect the result of executing an …\nUpdates registers to reflect the result of executing an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether <code>ip</code> points to an rdtsc instruction.\nWhether <code>ip</code> points to an rdtscp instruction.\nReturns the host system’s native TSC rate, or None if it …")