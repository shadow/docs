searchState.loadedDescShard("tcp", 0, "A TCP implementation with a somewhat-BSD-like socket API. …\nAn accept()ed TCP state. This is used to ensure that the …\nA connection has previously been attempted and was either …\nTCP is fully closed (in the “closed” state). This may …\nA connection has previously been attempted and was either …\nConnection is in the process of opening. More specifically …\nThe connection was closed while it was connecting, and no …\nA collection of methods that allow the TCP state to …\nThere is a pending error that can be read using …\nA previous connection attempt is in progress.\nIs already listening for new connections.\nIs listening for new connections.\nA packet payload containing a list of byte chunks.\nData can be read.\nA listening socket has a new incoming connection that can …\nThe connection has been closed for receiving. This is not …\nThe connection has been closed for sending. This should be …\nThe peer has sent a FIN, so no more data will be received.\nSpecifies whether the callback is meant to run on the …\nData can be written.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nConcatenate the byte chunks into a single byte chunk. …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nGet the current time.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThis allows the caller to update the state’s <code>Dependencies</code>…\nCreate a new <code>Dependencies</code> for use by a child state. When a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if the payload has no data (no byte chunks or …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nReturns the number of bytes in the payload.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nRegister a timer. The callback will be run on the parent …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nAn array that derefs to a variable-length slice. Useful …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>None</code> if there’s not enough space.\nTraits that provide an abstract interface for time-related …\nA trait for time durations that follow the API of …\nA trait for time instants that follow the API of …\nSee <code>std::time::Duration::MAX</code>.\nSee <code>std::time::Duration::MICROSECOND</code>.\nSee <code>std::time::Duration::MILLISECOND</code>.\nSee <code>std::time::Duration::NANOSECOND</code>.\nSee <code>std::time::Duration::SECOND</code>.\nSee <code>std::time::Duration::ZERO</code>.\nSee <code>std::time::Duration::as_micros</code>.\nSee <code>std::time::Duration::as_millis</code>.\nSee <code>std::time::Duration::as_nanos</code>.\nSee <code>std::time::Duration::as_secs</code>.\nSee <code>std::time::Instant::checked_add</code>.\nSee <code>std::time::Duration::checked_add</code>.\nSee <code>std::time::Duration::checked_div</code>.\nSee <code>std::time::Instant::checked_duration_since</code>.\nSee <code>std::time::Duration::checked_mul</code>.\nSee <code>std::time::Instant::checked_sub</code>.\nSee <code>std::time::Duration::checked_sub</code>.\nSee <code>std::time::Instant::duration_since</code>.\nSee <code>std::time::Duration::from_micros</code>.\nSee <code>std::time::Duration::from_millis</code>.\nSee <code>std::time::Duration::from_nanos</code>.\nSee <code>std::time::Duration::from_secs</code>.\nSee <code>std::time::Duration::is_zero</code>.\nSee <code>std::time::Duration::saturating_add</code>.\nSee <code>std::time::Instant::saturating_duration_since</code>.\nSee <code>std::time::Duration::saturating_mul</code>.\nSee <code>std::time::Duration::saturating_sub</code>.\nSee <code>std::time::Duration::subsec_micros</code>.\nSee <code>std::time::Duration::subsec_millis</code>.\nSee <code>std::time::Duration::subsec_nanos</code>.")