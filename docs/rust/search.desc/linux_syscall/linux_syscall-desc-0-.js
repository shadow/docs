searchState.loadedDescShard("linux_syscall", 0, "This library defines syscall numbers and a <code>syscall!</code> macro â€¦\nCheck whether a syscall succeeded or failed.\nInterpret a syscall result as a 32-bit integer.\nInterpret a syscall result as a 64-bit integer.\nInterpret a syscall result as a pointer.\nInterpret a syscall result as a pointer-sized integer.\nAn architecture-specific syscall number.\nLinux syscall numbers for specific target architectures.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInvokes a Linux syscall.\nLinux syscall numbers for the <code>aarch64</code> architecture.\nLinux syscall numbers for the <code>arm</code> architecture.\nLinux syscall numbers for the <code>riscv64</code> architecture.\nLinux syscall numbers for the <code>x86</code> architecture.\nLinux syscall numbers for the <code>x86_64</code> architecture.\nLinux syscall result for the <code>aarch64</code> architecture.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLinux syscall result for the <code>arm</code> architecture.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLinux syscall result for the <code>riscv64</code> architecture.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLinux syscall result for the <code>x86</code> architecture.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLinux syscall result for the <code>x86_64</code> architecture.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")