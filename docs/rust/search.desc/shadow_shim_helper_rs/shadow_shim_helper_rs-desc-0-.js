searchState.loadedDescShard("shadow_shim_helper_rs", 0, "Deals with instances of time in a Shadow simulation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValues for working with a simulated duration. Use …\nEmulation time in nanoseconds.\nThe number of nanoseconds from the epoch to January 1st, …\nDuplicated as EmulatedTime::UNIX_EPOCH\nAn instant in time (analagous to std::time::Instant) in …\nThe start time of the simulation - 00:00:00 UTC on 1 …\nThe  Unix epoch (00:00:00 UTC on 1 January 1970)\nReturns the duration since <code>earlier</code>, or <code>None</code> if <code>earlier</code> is …\nReturns the duration since <code>earlier</code>, or panics if <code>earlier</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the instant corresponding to <code>val</code> time units since the …\nGet the instance corresponding to <code>val</code> SimulationTime units …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the duration since <code>earlier</code>, or 0 if <code>earlier</code> is …\nConvert to the SimulationTime since the simulation began.\nConvert to number of SimulationTime units since the Unix …\nTrait for a type that provides an explicit method for …\nWrapper that uses a provided function to drop the inner …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUnwrap the value, discarding the dropper.\nCreate a wrapped value\nManages communication between the Shadow process and the …\nReturns the argument unchanged.\nReturns a reference to the “Plugin to Shadow” channel.\nReturns a reference to the “Shadow to Plugin” channel.\nCalls <code>U::from(self)</code>.\nReturns a reference to the “Shadow to Plugin” channel.\nReturns a reference to the “Plugin to Shadow” channel.\nPanics if NULL and returns the pointer.\nPanics if NULL (when debug asserts are enabled), and …\nPanics if NULL and returns the pointer.\nPanics if NULL (when debug asserts are enabled), and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA Root is a <code>![Sync]</code> token. Proof of access to a Root is …\nEvery object root is assigned a Tag, which we ensure is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAnalagous to std::cell::Cell. In particular like …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a RootedCell associated with <code>root</code>.\nAnalagous to std::rc::Rc. In particular like std::rc::Rc …\nLike Clone::clone, but requires that the corresponding …\nLike Clone::clone, but requires that the corresponding …\nCreate a weak reference.\nIf T itself implements <code>ExplicitDrop</code>, consider …\nDrops <code>self</code>, and if <code>self</code> was the last strong reference, call\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDrop the <code>RootedRc</code>, and return the inner value if this was …\nCreates a new object associated with <code>root</code>.\nAnalagous to std::cell::RefCell. In particular like …\nBorrow a reference. Panics if <code>root</code> is for the wrong Root, …\nBorrow a mutable reference. Panics if <code>root</code> is for the wrong\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a RootedRefCell associated with <code>root</code>.\nshadow-specific syscall numbers. When running under …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether the given number is a shadow-specific …\nRequest from Shadow to Shim to take the included shared …\nResponse to <code>ShimEventToShim::AddThreadReq</code>\nThe whole process has died. We inject this event to …\nData for <code>ShimEventToShim::AddThreadReq</code>\nData for <code>ShimEventToShadow::AddThreadRes</code>\nData for <code>ShimEventToShadow::StartReq</code>\nData for <code>ShimEventToShim::StartRes</code>\nData for <code>ShimEventToShim::Syscall</code> and …\nData for <code>ShimEventToShim::SyscallComplete</code> and …\nA message between Shadow and the Shim.\nFirst message from the shim, requesting that it’s ready …\nFirst message from shadow, indicating that it is ready for …\nRequest to emulate the given syscall.\nRequest to execute the given syscall natively.\nResponse to ShimEventToShim::Syscall\nResponse to ShimEventToShadow::Syscall\nResponse to ShimEventToShadow::Syscall indicating to …\nPseudorandom data to be used to overwrite the data linux …\nclone stack. u8 pointer in shim’s memory\nclone ctid. pid_t pointer in shim’s memory\nclone flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nShim pointer to be initd by Shadow. Optional. If set, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nclone tls.\nShim pointer to be initd by Shadow. Optional.\nclone ptid. pid_t pointer in shim’s memory\nWhether the syscall is eligible to be restarted. Only …\nShim pointer to be initd by Shadow. Required.\nThis drops all pending signals. Intended primarily for use …\nCreate a copy of <code>Self</code>. We can’t implement the <code>Clone</code> …\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle to shared memory for the Host\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum wall-clock time to allow managed code to run …\nSafety\nSafety\nSafety\nSafety\nAmount of simulation-time to move forward after …\nTake the next unblocked thread- <em>or</em> process-directed signal.\nHandle to shared memory for the Host\nSafety\nSafety\nSafety\nGet the logging start time\nSafety\nGet whether to model latency of unblocked syscalls.\nSafety\nSafety\nGet the signal stack as set by <code>sigaltstack(2)</code>.\nSafety\nSafety\nSafety\nSafety\nSafety\nGet the configured maximum unblocked syscall latency to …\nSafety\nSet the process’s pending signal set.\nSafety\nSafety\nSet the signal stack as set by <code>sigaltstack(2)</code>.\nSafety\nGet the configured latency to emulate for each unblocked …\nGet the configured latency to emulate for each unblocked …\nSafety\nSafety\nThe same as the type alias in the ‘main/cshadow.rs’ …\nMaximum value. Currently equivalent to SIMTIME_MAX to …\nInvalid simulation time.\nMaximum and minimum valid values.\nRepresents one hour in simulation time.\nRepresents one microsecond in simulation time.\nRepresents one millisecond in simulation time.\nRepresents one minute in simulation time.\nRepresents one nanosecond in simulation time.\nRepresents one second in simulation time.\nReturns the argument unchanged.\nConvert a <code>Duration</code> to a <code>SimulationTime</code>. This function …\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nRepresents a pointer to a virtual address in plugin …\nRepresents a pointer to a <em>physical</em> address in plugin …\nA register used for input/output in a syscall.\nUsed to indicate an untyped <code>ForeignPtr</code> in C code.\nAdd an offset to a pointer. <code>count</code> is in units of <code>T</code>.\nCast from <code>ForeignPtr&lt;T&gt;</code> to <code>ForeignPtr&lt;U&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>ForeignPtr</code> from a raw pointer to plugin memory.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a raw pointer. “safe” in itself, but keep …\nConvert to a raw pointer. “safe” in itself, but keep …\nSubtract an offset from a pointer. <code>count</code> is in units of <code>T</code>.\nImplements <code>Debug</code> using the provided closure.\nA trait to prevent type inference during function calls.\nA type that allows us to make a pointer Send since there …\nA type that allows us to make a pointer Send + Sync since …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nHelper for formatting times.\nFormat as HH:MM:SS.\nFormat as HH:MM:SS.mmm.\nFormat as HH:MM:SS.nnnnnnnnn.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")