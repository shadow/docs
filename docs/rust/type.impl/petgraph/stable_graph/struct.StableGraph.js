(function() {
    var type_impls = Object.fromEntries([["petgraph",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Build-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#175-199\">Source</a><a href=\"#impl-Build-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/data/trait.Build.html\" title=\"trait petgraph::data::Build\">Build</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.add_node\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#180-182\">Source</a><a href=\"#method.add_node\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.Build.html#tymethod.add_node\" class=\"fn\">add_node</a>(&amp;mut self, weight: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.NodeWeight\" title=\"type petgraph::visit::Data::NodeWeight\">NodeWeight</a>) -&gt; Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_edge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#183-190\">Source</a><a href=\"#method.add_edge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.Build.html#method.add_edge\" class=\"fn\">add_edge</a>(\n    &amp;mut self,\n    a: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>,\n    b: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>,\n    weight: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.EdgeWeight\" title=\"type petgraph::visit::Data::EdgeWeight\">EdgeWeight</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" title=\"type petgraph::visit::GraphBase::EdgeId\">EdgeId</a>&gt;</h4></section></summary><div class='docblock'>Add a new edge. If parallel edges (duplicate) are not allowed and\nthe edge already exists, return <code>None</code>. <a href=\"petgraph/data/trait.Build.html#method.add_edge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_edge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#191-198\">Source</a><a href=\"#method.update_edge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.Build.html#tymethod.update_edge\" class=\"fn\">update_edge</a>(\n    &amp;mut self,\n    a: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>,\n    b: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>,\n    weight: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.EdgeWeight\" title=\"type petgraph::visit::Data::EdgeWeight\">EdgeWeight</a>,\n) -&gt; Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" title=\"type petgraph::visit::GraphBase::EdgeId\">EdgeId</a></h4></section></summary><div class='docblock'>Add or update the edge from <code>a</code> to <code>b</code>. Return the id of the affected\nedge. <a href=\"petgraph/data/trait.Build.html#tymethod.update_edge\">Read more</a></div></details></div></details>","Build","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1197-1219\">Source</a><a href=\"#impl-Clone-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3><div class=\"docblock\"><p>The resulting cloned graph has the same graph indices as <code>self</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1202-1210\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1212-1218\">Source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, rhs: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.87.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Create-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#247-255\">Source</a><a href=\"#impl-Create-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/data/trait.Create.html\" title=\"trait petgraph::data::Create\">Create</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.with_capacity\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#252-254\">Source</a><a href=\"#method.with_capacity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.Create.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(nodes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>, edges: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></div></details>","Create","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Data-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1864-1871\">Source</a><a href=\"#impl-Data-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.Data.html\" title=\"trait petgraph::visit::Data\">Data</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.NodeWeight\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1869\">Source</a><a href=\"#associatedtype.NodeWeight\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.Data.html#associatedtype.NodeWeight\" class=\"associatedtype\">NodeWeight</a> = N</h4></section><section id=\"associatedtype.EdgeWeight\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1870\">Source</a><a href=\"#associatedtype.EdgeWeight\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.Data.html#associatedtype.EdgeWeight\" class=\"associatedtype\">EdgeWeight</a> = E</h4></section></div></details>","Data","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataMap-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#121-132\">Source</a><a href=\"#impl-DataMap-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/data/trait.DataMap.html\" title=\"trait petgraph::data::DataMap\">DataMap</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.node_weight\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#126-128\">Source</a><a href=\"#method.node_weight\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.DataMap.html#tymethod.node_weight\" class=\"fn\">node_weight</a>(&amp;self, id: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.NodeWeight\" title=\"type petgraph::visit::Data::NodeWeight\">NodeWeight</a>&gt;</h4></section><section id=\"method.edge_weight\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#129-131\">Source</a><a href=\"#method.edge_weight\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.DataMap.html#tymethod.edge_weight\" class=\"fn\">edge_weight</a>(&amp;self, id: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" title=\"type petgraph::visit::GraphBase::EdgeId\">EdgeId</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.EdgeWeight\" title=\"type petgraph::visit::Data::EdgeWeight\">EdgeWeight</a>&gt;</h4></section></div></details>","DataMap","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DataMapMut-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#135-146\">Source</a><a href=\"#impl-DataMapMut-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/data/trait.DataMapMut.html\" title=\"trait petgraph::data::DataMapMut\">DataMapMut</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.node_weight_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#140-142\">Source</a><a href=\"#method.node_weight_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.DataMapMut.html#tymethod.node_weight_mut\" class=\"fn\">node_weight_mut</a>(&amp;mut self, id: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.NodeWeight\" title=\"type petgraph::visit::Data::NodeWeight\">NodeWeight</a>&gt;</h4></section><section id=\"method.edge_weight_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#143-145\">Source</a><a href=\"#method.edge_weight_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.DataMapMut.html#tymethod.edge_weight_mut\" class=\"fn\">edge_weight_mut</a>(&amp;mut self, id: Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" title=\"type petgraph::visit::GraphBase::EdgeId\">EdgeId</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.EdgeWeight\" title=\"type petgraph::visit::Data::EdgeWeight\">EdgeWeight</a>&gt;</h4></section></div></details>","DataMapMut","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#104-164\">Source</a><a href=\"#impl-Debug-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#111-163\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.87.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.87.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1276-1284\">Source</a><a href=\"#impl-Default-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3><div class=\"docblock\"><p>Create a new empty <code>StableGraph</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1281-1283\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EdgeCount-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#2037-2046\">Source</a><a href=\"#impl-EdgeCount-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.EdgeCount.html\" title=\"trait petgraph::visit::EdgeCount\">EdgeCount</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#2043-2045\">Source</a><a href=\"#method.edge_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.EdgeCount.html#tymethod.edge_count\" class=\"fn\">edge_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the number of edges in the graph.</div></details></div></details>","EdgeCount","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EdgeIndexable-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1988-2006\">Source</a><a href=\"#impl-EdgeIndexable-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.EdgeIndexable.html\" title=\"trait petgraph::visit::EdgeIndexable\">EdgeIndexable</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_bound\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1993-1997\">Source</a><a href=\"#method.edge_bound\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.EdgeIndexable.html#tymethod.edge_bound\" class=\"fn\">edge_bound</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return an upper bound of the edge indices in the graph\n(suitable for the size of a bitmap).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1999-2001\">Source</a><a href=\"#method.to_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.EdgeIndexable.html#tymethod.to_index\" class=\"fn\">to_index</a>(&amp;self, ix: <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Convert <code>a</code> to an integer index.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#2003-2005\">Source</a><a href=\"#method.from_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.EdgeIndexable.html#tymethod.from_index\" class=\"fn\">from_index</a>(&amp;self, ix: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>) -&gt; Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" title=\"type petgraph::visit::GraphBase::EdgeId\">EdgeId</a></h4></section></summary><div class='docblock'>Convert <code>i</code> to an edge index. <code>i</code> must be a valid value in the graph.</div></details></div></details>","EdgeIndexable","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CGraph%3CN,+E,+Ty,+Ix%3E%3E-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1292-1319\">Source</a><a href=\"#impl-From%3CGraph%3CN,+E,+Ty,+Ix%3E%3E-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;&gt; for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3><div class=\"docblock\"><p>Convert a <code>Graph</code> into a <code>StableGraph</code></p>\n</div></section></summary><div class=\"docblock\"><p>Computes in <strong>O(|V| + |E|)</strong> time.</p>\n<p>The resulting graph has the same node and edge indices as\nthe original graph.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1297-1318\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(g: <a class=\"struct\" href=\"petgraph/graph/struct.Graph.html\" title=\"struct petgraph::graph::Graph\">Graph</a>&lt;N, E, Ty, Ix&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Graph<N, E, Ty, Ix>>","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromElements-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#355-367\">Source</a><a href=\"#impl-FromElements-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/data/trait.FromElements.html\" title=\"trait petgraph::data::FromElements\">FromElements</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_elements\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/data.rs.html#360-366\">Source</a><a href=\"#method.from_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/data/trait.FromElements.html#method.from_elements\" class=\"fn\">from_elements</a>&lt;I&gt;(iterable: I) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"petgraph/data/enum.Element.html\" title=\"enum petgraph::data::Element\">Element</a>&lt;Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.NodeWeight\" title=\"type petgraph::visit::Data::NodeWeight\">NodeWeight</a>, Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Data.html#associatedtype.EdgeWeight\" title=\"type petgraph::visit::Data::EdgeWeight\">EdgeWeight</a>&gt;&gt;,</div></h4></section></div></details>","FromElements","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromGraph6-for-StableGraph%3C(),+(),+Undirected,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph6/graph6_decoder.rs.html#137-150\">Source</a><a href=\"#impl-FromGraph6-for-StableGraph%3C(),+(),+Undirected,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>&gt; <a class=\"trait\" href=\"petgraph/graph6/trait.FromGraph6.html\" title=\"trait petgraph::graph6::FromGraph6\">FromGraph6</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"petgraph/enum.Undirected.html\" title=\"enum petgraph::Undirected\">Undirected</a>, Ix&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.from_graph6_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph6/graph6_decoder.rs.html#138-149\">Source</a><a href=\"#method.from_graph6_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/graph6/trait.FromGraph6.html#tymethod.from_graph6_string\" class=\"fn\">from_graph6_string</a>(graph6_string: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>) -&gt; Self</h4></section></div></details>","FromGraph6","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GetAdjacencyMatrix-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/traits_graph.rs.html#47-73\">Source</a><a href=\"#impl-GetAdjacencyMatrix-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.GetAdjacencyMatrix.html\" title=\"trait petgraph::visit::GetAdjacencyMatrix\">GetAdjacencyMatrix</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3><div class=\"docblock\"><p>The adjacency matrix for <strong>Graph</strong> is a bitmap that’s computed by\n<code>.adjacency_matrix()</code>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.AdjMatrix\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/traits_graph.rs.html#52\">Source</a><a href=\"#associatedtype.AdjMatrix\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.GetAdjacencyMatrix.html#associatedtype.AdjMatrix\" class=\"associatedtype\">AdjMatrix</a> = <a class=\"struct\" href=\"fixedbitset/struct.FixedBitSet.html\" title=\"struct fixedbitset::FixedBitSet\">FixedBitSet</a></h4></section></summary><div class='docblock'>The associated adjacency matrix type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.adjacency_matrix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/traits_graph.rs.html#54-66\">Source</a><a href=\"#method.adjacency_matrix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.GetAdjacencyMatrix.html#tymethod.adjacency_matrix\" class=\"fn\">adjacency_matrix</a>(&amp;self) -&gt; <a class=\"struct\" href=\"fixedbitset/struct.FixedBitSet.html\" title=\"struct fixedbitset::FixedBitSet\">FixedBitSet</a></h4></section></summary><div class='docblock'>Create the adjacency matrix</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_adjacent\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/traits_graph.rs.html#68-72\">Source</a><a href=\"#method.is_adjacent\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.GetAdjacencyMatrix.html#tymethod.is_adjacent\" class=\"fn\">is_adjacent</a>(\n    &amp;self,\n    matrix: &amp;<a class=\"struct\" href=\"fixedbitset/struct.FixedBitSet.html\" title=\"struct fixedbitset::FixedBitSet\">FixedBitSet</a>,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    b: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Return true if there is an edge from <code>a</code> to <code>b</code>, false otherwise. <a href=\"petgraph/visit/trait.GetAdjacencyMatrix.html#tymethod.is_adjacent\">Read more</a></div></details></div></details>","GetAdjacencyMatrix","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GraphBase-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1841-1847\">Source</a><a href=\"#impl-GraphBase-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.GraphBase.html\" title=\"trait petgraph::visit::GraphBase\">GraphBase</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.NodeId\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1845\">Source</a><a href=\"#associatedtype.NodeId\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" class=\"associatedtype\">NodeId</a> = <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;</h4></section></summary><div class='docblock'>node identifier</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.EdgeId\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1846\">Source</a><a href=\"#associatedtype.EdgeId\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.GraphBase.html#associatedtype.EdgeId\" class=\"associatedtype\">EdgeId</a> = <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;</h4></section></summary><div class='docblock'>edge identifier</div></details></div></details>","GraphBase","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GraphProp-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1873-1879\">Source</a><a href=\"#impl-GraphProp-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.GraphProp.html\" title=\"trait petgraph::visit::GraphProp\">GraphProp</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.EdgeType\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1878\">Source</a><a href=\"#associatedtype.EdgeType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.GraphProp.html#associatedtype.EdgeType\" class=\"associatedtype\">EdgeType</a> = Ty</h4></section></summary><div class='docblock'>The kind of edges in the graph.</div></details><section id=\"method.is_directed\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/visit/mod.rs.html#331-333\">Source</a><a href=\"#method.is_directed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.GraphProp.html#method.is_directed\" class=\"fn\">is_directed</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></div></details>","GraphProp","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CEdgeIndex%3CIx%3E%3E-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1251-1260\">Source</a><a href=\"#impl-Index%3CEdgeIndex%3CIx%3E%3E-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;&gt; for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3><div class=\"docblock\"><p>Index the <code>StableGraph</code> by <code>EdgeIndex</code> to access edge weights.</p>\n</div></section></summary><div class=\"docblock\"><p><strong>Panics</strong> if the edge doesn’t exist.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1256\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = E</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1257-1259\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;E</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<EdgeIndex<Ix>>","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CNodeIndex%3CIx%3E%3E-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1224-1233\">Source</a><a href=\"#impl-Index%3CNodeIndex%3CIx%3E%3E-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;&gt; for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3><div class=\"docblock\"><p>Index the <code>StableGraph</code> by <code>NodeIndex</code> to access node weights.</p>\n</div></section></summary><div class=\"docblock\"><p><strong>Panics</strong> if the node doesn’t exist.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1229\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = N</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1230-1232\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;N</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<NodeIndex<Ix>>","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CEdgeIndex%3CIx%3E%3E-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1265-1273\">Source</a><a href=\"#impl-IndexMut%3CEdgeIndex%3CIx%3E%3E-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;&gt; for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3><div class=\"docblock\"><p>Index the <code>StableGraph</code> by <code>EdgeIndex</code> to access edge weights.</p>\n</div></section></summary><div class=\"docblock\"><p><strong>Panics</strong> if the edge doesn’t exist.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1270-1272\">Source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;mut E</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<EdgeIndex<Ix>>","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CNodeIndex%3CIx%3E%3E-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1238-1246\">Source</a><a href=\"#impl-IndexMut%3CNodeIndex%3CIx%3E%3E-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;&gt; for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3><div class=\"docblock\"><p>Index the <code>StableGraph</code> by <code>NodeIndex</code> to access node weights.</p>\n</div></section></summary><div class=\"docblock\"><p><strong>Panics</strong> if the node doesn’t exist.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1243-1245\">Source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;mut N</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<NodeIndex<Ix>>","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NodeCount-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1892-1900\">Source</a><a href=\"#impl-NodeCount-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.NodeCount.html\" title=\"trait petgraph::visit::NodeCount\">NodeCount</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.node_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1897-1899\">Source</a><a href=\"#method.node_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.NodeCount.html#tymethod.node_count\" class=\"fn\">node_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a></h4></section></div></details>","NodeCount","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NodeIndexable-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1916-1931\">Source</a><a href=\"#impl-NodeIndexable-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.NodeIndexable.html\" title=\"trait petgraph::visit::NodeIndexable\">NodeIndexable</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.node_bound\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1922-1924\">Source</a><a href=\"#method.node_bound\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.NodeIndexable.html#tymethod.node_bound\" class=\"fn\">node_bound</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return an upper bound of the node indices in the graph</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1925-1927\">Source</a><a href=\"#method.to_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.NodeIndexable.html#tymethod.to_index\" class=\"fn\">to_index</a>(&amp;self, ix: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Convert <code>a</code> to an integer index.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1928-1930\">Source</a><a href=\"#method.from_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.NodeIndexable.html#tymethod.from_index\" class=\"fn\">from_index</a>(&amp;self, ix: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>) -&gt; Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.GraphBase.html#associatedtype.NodeId\" title=\"type petgraph::visit::GraphBase::NodeId\">NodeId</a></h4></section></summary><div class='docblock'>Convert <code>i</code> to a node index. <code>i</code> must be a valid value in the graph.</div></details></div></details>","NodeIndexable","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StableGraph%3CN,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#166-175\">Source</a><a href=\"#impl-StableGraph%3CN,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E&gt; <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, <a class=\"enum\" href=\"petgraph/enum.Directed.html\" title=\"enum petgraph::Directed\">Directed</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#172-174\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new <code>StableGraph</code> with directed edges.</p>\n<p>This is a convenience method. See <code>StableGraph::with_capacity</code>\nor <code>StableGraph::default</code> for a constructor that is generic in all the\ntype parameters of <code>StableGraph</code>.</p>\n</div></details></div></details>",0,"petgraph::graph_impl::stable_graph::StableDiGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#177-1194\">Source</a><a href=\"#impl-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#183-191\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(nodes: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>, edges: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new <code>StableGraph</code> with estimated capacity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#194-196\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Return the current node and edge capacity of the graph.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#199-210\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.reverse\" class=\"fn\">reverse</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Reverse the direction of all edges</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#213-219\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Remove all nodes and edges</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear_edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#222-232\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.clear_edges\" class=\"fn\">clear_edges</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Remove all edges</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.node_count\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#237-239\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.node_count\" class=\"fn\">node_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of nodes (vertices) in the graph.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_count\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#244-246\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.edge_count\" class=\"fn\">edge_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of edges in the graph.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_directed\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#250-252\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.is_directed\" class=\"fn\">is_directed</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Whether the graph has directed edges or not.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_node\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#263-265\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.add_node\" class=\"fn\">add_node</a>(&amp;mut self, weight: N) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;</h4></section></summary><div class=\"docblock\"><p>Add a node (also called vertex) with associated data <code>weight</code> to the graph.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n<p>Return the index of the new node.</p>\n<p><strong>Panics</strong> if the <code>StableGraph</code> is at the maximum number of nodes for\nits index type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_add_node\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#274-283\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.try_add_node\" class=\"fn\">try_add_node</a>(&amp;mut self, weight: N) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;, <a class=\"enum\" href=\"petgraph/graph/enum.GraphError.html\" title=\"enum petgraph::graph::GraphError\">GraphError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Add a node (also called vertex) with associated data <code>weight</code> to the graph.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n<p>Return the index of the new node.</p>\n<p>Return <a href=\"petgraph/graph/enum.GraphError.html#variant.NodeIxLimit\" title=\"variant petgraph::graph::GraphError::NodeIxLimit\"><code>GraphError::NodeIxLimit</code></a> if the <code>StableGraph</code> is at the maximum number of nodes for its index.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_node\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#307-335\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.remove_node\" class=\"fn\">remove_node</a>(&amp;mut self, a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;N&gt;</h4></section></summary><div class=\"docblock\"><p>Remove <code>a</code> from the graph if it exists, and return its weight.\nIf it doesn’t exist in the graph, return <code>None</code>.</p>\n<p>The node index <code>a</code> is invalidated, but none other.\nEdge indices are invalidated as they would be following the removal of\neach edge with an endpoint in <code>a</code>.</p>\n<p>Computes in <strong>O(e’)</strong> time, where <strong>e’</strong> is the number of affected\nedges, including <em>n</em> calls to <code>.remove_edge()</code> where <em>n</em> is the number\nof edges with an endpoint in <code>a</code>.</p>\n</div></details><section id=\"method.contains_node\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#337-339\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.contains_node\" class=\"fn\">contains_node</a>(&amp;self, a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#362-371\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.add_edge\" class=\"fn\">add_edge</a>(\n    &amp;mut self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    b: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    weight: E,\n) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;</h4></section></summary><div class=\"docblock\"><p>Add an edge from <code>a</code> to <code>b</code> to the graph, with its associated\ndata <code>weight</code>.</p>\n<p>Return the index of the new edge.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n<p><strong>Panics</strong> if any of the nodes don’t exist.<br>\n<strong>Panics</strong> if the <code>StableGraph</code> is at the maximum number of edges for\nits index type.</p>\n<p><strong>Note:</strong> <code>StableGraph</code> allows adding parallel (“duplicate”) edges.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_add_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#386-452\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.try_add_edge\" class=\"fn\">try_add_edge</a>(\n    &amp;mut self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    b: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    weight: E,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;, <a class=\"enum\" href=\"petgraph/graph/enum.GraphError.html\" title=\"enum petgraph::graph::GraphError\">GraphError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to add an edge from <code>a</code> to <code>b</code> to the graph, with its associated\ndata <code>weight</code>.</p>\n<p>Return the index of the new edge.</p>\n<p>Computes in <strong>O(1)</strong> time.</p>\n<p>Possible errors:</p>\n<ul>\n<li><a href=\"petgraph/graph/enum.GraphError.html#variant.NodeMissed\" title=\"variant petgraph::graph::GraphError::NodeMissed\"><code>GraphError::NodeMissed</code></a> - if any of the nodes don’t exist.<br></li>\n<li><a href=\"petgraph/graph/enum.GraphError.html#variant.EdgeIxLimit\" title=\"variant petgraph::graph::GraphError::EdgeIxLimit\"><code>GraphError::EdgeIxLimit</code></a> if the <code>StableGraph</code> is at the maximum number of edges for its index\ntype (N/A if usize).</li>\n</ul>\n<p><strong>Note:</strong> <code>StableGraph</code> allows adding parallel (“duplicate”) edges.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#479-481\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.update_edge\" class=\"fn\">update_edge</a>(\n    &amp;mut self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    b: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    weight: E,\n) -&gt; <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;</h4></section></summary><div class=\"docblock\"><p>Add or update an edge from <code>a</code> to <code>b</code>.\nIf the edge already exists, its weight is updated.</p>\n<p>Return the index of the affected edge.</p>\n<p>Computes in <strong>O(e’)</strong> time, where <strong>e’</strong> is the number of edges\nconnected to <code>a</code> (and <code>b</code>, if the graph edges are undirected).</p>\n<p><strong>Panics</strong> if any of the nodes don’t exist\nor the stable graph is at the maximum number of edges for its index (when adding new edge).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_update_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#495-506\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.try_update_edge\" class=\"fn\">try_update_edge</a>(\n    &amp;mut self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    b: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    weight: E,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;, <a class=\"enum\" href=\"petgraph/graph/enum.GraphError.html\" title=\"enum petgraph::graph::GraphError\">GraphError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to add or update an edge from <code>a</code> to <code>b</code>.\nIf the edge already exists, its weight is updated.</p>\n<p>Return the index of the affected edge.</p>\n<p>Computes in <strong>O(e’)</strong> time, where <strong>e’</strong> is the number of edges\nconnected to <code>a</code> (and <code>b</code>, if the graph edges are undirected).</p>\n<p>Possible errors:</p>\n<ul>\n<li><a href=\"petgraph/graph/enum.GraphError.html#variant.NodeMissed\" title=\"variant petgraph::graph::GraphError::NodeMissed\"><code>GraphError::NodeMissed</code></a> - if any of the nodes don’t exist.<br></li>\n<li><a href=\"petgraph/graph/enum.GraphError.html#variant.EdgeIxLimit\" title=\"variant petgraph::graph::GraphError::EdgeIxLimit\"><code>GraphError::EdgeIxLimit</code></a> if the <code>StableGraph</code> is at the maximum number of edges for its index\ntype (N/A if usize).</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#514-537\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.remove_edge\" class=\"fn\">remove_edge</a>(&amp;mut self, e: <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;E&gt;</h4></section></summary><div class=\"docblock\"><p>Remove an edge and return its edge weight, or <code>None</code> if it didn’t exist.</p>\n<p>Invalidates the edge index <code>e</code> but no other.</p>\n<p>Computes in <strong>O(e’)</strong> time, where <strong>e’</strong> is the number of edges\nconnected to the same endpoints as <code>e</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.node_weight\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#542-547\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.node_weight\" class=\"fn\">node_weight</a>(&amp;self, a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;N</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Access the weight for node <code>a</code>.</p>\n<p>Also available with indexing syntax: <code>&amp;graph[a]</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.node_weight_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#552-557\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.node_weight_mut\" class=\"fn\">node_weight_mut</a>(&amp;mut self, a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;mut N</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Access the weight for node <code>a</code>, mutably.</p>\n<p>Also available with indexing syntax: <code>&amp;mut graph[a]</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.node_weights\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#563-567\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.node_weights\" class=\"fn\">node_weights</a>(&amp;self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;N</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return an iterator yielding immutable access to all node weights.</p>\n<p>The order in which weights are yielded matches the order of their node\nindices.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.node_weights_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#572-576\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.node_weights_mut\" class=\"fn\">node_weights_mut</a>(&amp;mut self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;mut N</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return an iterator yielding mutable access to all node weights.</p>\n<p>The order in which weights are yielded matches the order of their node\nindices.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.node_indices\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#579-583\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.node_indices\" class=\"fn\">node_indices</a>(&amp;self) -&gt; <a class=\"struct\" href=\"petgraph/stable_graph/struct.NodeIndices.html\" title=\"struct petgraph::stable_graph::NodeIndices\">NodeIndices</a>&lt;'_, N, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"NodeIndices&lt;&#39;_, N, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator over the node indices of the graph</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_weight\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#588-593\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.edge_weight\" class=\"fn\">edge_weight</a>(&amp;self, e: <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;E</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Access the weight for edge <code>e</code>.</p>\n<p>Also available with indexing syntax: <code>&amp;graph[e]</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_weight_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#598-603\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.edge_weight_mut\" class=\"fn\">edge_weight_mut</a>(&amp;mut self, e: <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;mut E</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Access the weight for edge <code>e</code>, mutably</p>\n<p>Also available with indexing syntax: <code>&amp;mut graph[e]</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_weights\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#609-613\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.edge_weights\" class=\"fn\">edge_weights</a>(&amp;self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;E</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return an iterator yielding immutable access to all edge weights.</p>\n<p>The order in which weights are yielded matches the order of their edge\nindices.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_weights_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#618-622\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.edge_weights_mut\" class=\"fn\">edge_weights_mut</a>(&amp;mut self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;mut E</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return an iterator yielding mutable access to all edge weights.</p>\n<p>The order in which weights are yielded matches the order of their edge\nindices.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_endpoints\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#625-630\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.edge_endpoints\" class=\"fn\">edge_endpoints</a>(\n    &amp;self,\n    e: <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;, <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;)&gt;</h4></section></summary><div class=\"docblock\"><p>Access the source and target nodes for <code>e</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edge_indices\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#633-637\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.edge_indices\" class=\"fn\">edge_indices</a>(&amp;self) -&gt; <a class=\"struct\" href=\"petgraph/stable_graph/struct.EdgeIndices.html\" title=\"struct petgraph::stable_graph::EdgeIndices\">EdgeIndices</a>&lt;'_, E, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EdgeIndices&lt;&#39;_, E, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator over the edge indices of the graph</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edges_connecting\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#645-655\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.edges_connecting\" class=\"fn\">edges_connecting</a>(\n    &amp;self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    b: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n) -&gt; <a class=\"struct\" href=\"petgraph/stable_graph/struct.EdgesConnecting.html\" title=\"struct petgraph::stable_graph::EdgesConnecting\">EdgesConnecting</a>&lt;'_, E, Ty, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EdgesConnecting&lt;&#39;_, E, Ty, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator over all the edges connecting <code>a</code> and <code>b</code>.</p>\n<ul>\n<li><code>Directed</code>: Outgoing edges from <code>a</code>.</li>\n<li><code>Undirected</code>: All edges connected to <code>a</code>.</li>\n</ul>\n<p>Iterator element type is <code>EdgeReference&lt;E, Ix&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#661-663\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.contains_edge\" class=\"fn\">contains_edge</a>(&amp;self, a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;, b: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Lookup if there is an edge from <code>a</code> to <code>b</code>.</p>\n<p>Computes in <strong>O(e’)</strong> time, where <strong>e’</strong> is the number of edges\nconnected to <code>a</code> (and <code>b</code>, if the graph edges are undirected).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_edge\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#669-678\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.find_edge\" class=\"fn\">find_edge</a>(\n    &amp;self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    b: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Lookup an edge from <code>a</code> to <code>b</code>.</p>\n<p>Computes in <strong>O(e’)</strong> time, where <strong>e’</strong> is the number of edges\nconnected to <code>a</code> (and <code>b</code>, if the graph edges are undirected).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_edge_undirected\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#687-696\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.find_edge_undirected\" class=\"fn\">find_edge_undirected</a>(\n    &amp;self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    b: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;, <a class=\"enum\" href=\"petgraph/enum.Direction.html\" title=\"enum petgraph::Direction\">Direction</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Lookup an edge between <code>a</code> and <code>b</code>, in either direction.</p>\n<p>If the graph is undirected, then this is equivalent to <code>.find_edge()</code>.</p>\n<p>Return the edge index and its directionality, with <code>Outgoing</code> meaning\nfrom <code>a</code> to <code>b</code> and <code>Incoming</code> the reverse,\nor <code>None</code> if the edge does not exist.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neighbors\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#710-712\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.neighbors\" class=\"fn\">neighbors</a>(&amp;self, a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"struct\" href=\"petgraph/stable_graph/struct.Neighbors.html\" title=\"struct petgraph::stable_graph::Neighbors\">Neighbors</a>&lt;'_, E, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Neighbors&lt;&#39;_, E, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator of all nodes with an edge starting from <code>a</code>.</p>\n<ul>\n<li><code>Directed</code>: Outgoing edges from <code>a</code>.</li>\n<li><code>Undirected</code>: All edges connected to <code>a</code>.</li>\n</ul>\n<p>Produces an empty iterator if the node doesn’t exist.<br>\nIterator element type is <code>NodeIndex&lt;Ix&gt;</code>.</p>\n<p>Use <a href=\"struct.Neighbors.html#method.detach\"><code>.neighbors(a).detach()</code></a> to get a neighbor walker that does\nnot borrow from the graph.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neighbors_directed\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#729-737\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.neighbors_directed\" class=\"fn\">neighbors_directed</a>(\n    &amp;self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    dir: <a class=\"enum\" href=\"petgraph/enum.Direction.html\" title=\"enum petgraph::Direction\">Direction</a>,\n) -&gt; <a class=\"struct\" href=\"petgraph/stable_graph/struct.Neighbors.html\" title=\"struct petgraph::stable_graph::Neighbors\">Neighbors</a>&lt;'_, E, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Neighbors&lt;&#39;_, E, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator of all neighbors that have an edge between them and <code>a</code>,\nin the specified direction.\nIf the graph’s edges are undirected, this is equivalent to <em>.neighbors(a)</em>.</p>\n<ul>\n<li><code>Directed</code>, <code>Outgoing</code>: All edges from <code>a</code>.</li>\n<li><code>Directed</code>, <code>Incoming</code>: All edges to <code>a</code>.</li>\n<li><code>Undirected</code>: All edges connected to <code>a</code>.</li>\n</ul>\n<p>Produces an empty iterator if the node doesn’t exist.<br>\nIterator element type is <code>NodeIndex&lt;Ix&gt;</code>.</p>\n<p>Use <a href=\"struct.Neighbors.html#method.detach\"><code>.neighbors_directed(a, dir).detach()</code></a> to get a neighbor walker that does\nnot borrow from the graph.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neighbors_undirected\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#752-761\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.neighbors_undirected\" class=\"fn\">neighbors_undirected</a>(&amp;self, a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"struct\" href=\"petgraph/stable_graph/struct.Neighbors.html\" title=\"struct petgraph::stable_graph::Neighbors\">Neighbors</a>&lt;'_, E, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Neighbors&lt;&#39;_, E, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator of all neighbors that have an edge between them and <code>a</code>,\nin either direction.\nIf the graph’s edges are undirected, this is equivalent to <em>.neighbors(a)</em>.</p>\n<ul>\n<li><code>Directed</code> and <code>Undirected</code>: All edges connected to <code>a</code>.</li>\n</ul>\n<p>Produces an empty iterator if the node doesn’t exist.<br>\nIterator element type is <code>NodeIndex&lt;Ix&gt;</code>.</p>\n<p>Use <a href=\"struct.Neighbors.html#method.detach\"><code>.neighbors_undirected(a).detach()</code></a> to get a neighbor walker that does\nnot borrow from the graph.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#770-772\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.edges\" class=\"fn\">edges</a>(&amp;self, a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"struct\" href=\"petgraph/stable_graph/struct.Edges.html\" title=\"struct petgraph::stable_graph::Edges\">Edges</a>&lt;'_, E, Ty, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Edges&lt;&#39;_, E, Ty, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator of all edges of <code>a</code>.</p>\n<ul>\n<li><code>Directed</code>: Outgoing edges from <code>a</code>.</li>\n<li><code>Undirected</code>: All edges connected to <code>a</code>.</li>\n</ul>\n<p>Produces an empty iterator if the node doesn’t exist.<br>\nIterator element type is <code>EdgeReference&lt;E, Ix&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edges_directed\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#785-796\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.edges_directed\" class=\"fn\">edges_directed</a>(\n    &amp;self,\n    a: <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;,\n    dir: <a class=\"enum\" href=\"petgraph/enum.Direction.html\" title=\"enum petgraph::Direction\">Direction</a>,\n) -&gt; <a class=\"struct\" href=\"petgraph/stable_graph/struct.Edges.html\" title=\"struct petgraph::stable_graph::Edges\">Edges</a>&lt;'_, E, Ty, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Edges&lt;&#39;_, E, Ty, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator of all edges of <code>a</code>, in the specified direction.</p>\n<ul>\n<li><code>Directed</code>, <code>Outgoing</code>: All edges from <code>a</code>.</li>\n<li><code>Directed</code>, <code>Incoming</code>: All edges to <code>a</code>.</li>\n<li><code>Undirected</code>, <code>Outgoing</code>: All edges connected to <code>a</code>, with <code>a</code> being the source of each\nedge.</li>\n<li><code>Undirected</code>, <code>Incoming</code>: All edges connected to <code>a</code>, with <code>a</code> being the target of each\nedge.</li>\n</ul>\n<p>Produces an empty iterator if the node <code>a</code> doesn’t exist.<br>\nIterator element type is <code>EdgeReference&lt;E, Ix&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.externals\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#809-815\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.externals\" class=\"fn\">externals</a>(&amp;self, dir: <a class=\"enum\" href=\"petgraph/enum.Direction.html\" title=\"enum petgraph::Direction\">Direction</a>) -&gt; <a class=\"struct\" href=\"petgraph/stable_graph/struct.Externals.html\" title=\"struct petgraph::stable_graph::Externals\">Externals</a>&lt;'_, N, Ty, Ix&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Externals&lt;&#39;_, N, Ty, Ix&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator over either the nodes without edges to them\n(<code>Incoming</code>) or from them (<code>Outgoing</code>).</p>\n<p>An <em>internal</em> node has both incoming and outgoing edges.\nThe nodes in <code>.externals(Incoming)</code> are the source nodes and\n<code>.externals(Outgoing)</code> are the sinks of the graph.</p>\n<p>For a graph with undirected edges, both the sinks and the sources are\njust the nodes without edges.</p>\n<p>The whole iteration computes in <strong>O(|V|)</strong> time.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_twice_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#822-845\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.index_twice_mut\" class=\"fn\">index_twice_mut</a>&lt;T, U&gt;(\n    &amp;mut self,\n    i: T,\n    j: U,\n) -&gt; (&amp;mut &lt;Self as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a>, &amp;mut &lt;Self as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a>)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;U&gt;,\n    T: <a class=\"trait\" href=\"petgraph/graph/trait.GraphIndex.html\" title=\"trait petgraph::graph::GraphIndex\">GraphIndex</a>,\n    U: <a class=\"trait\" href=\"petgraph/graph/trait.GraphIndex.html\" title=\"trait petgraph::graph::GraphIndex\">GraphIndex</a>,</div></h4></section></summary><div class=\"docblock\"><p>Index the <code>StableGraph</code> by two indices, any combination of\nnode or edge indices is fine.</p>\n<p><strong>Panics</strong> if the indices are equal or if they are not found.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain_nodes\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#862-873\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.retain_nodes\" class=\"fn\">retain_nodes</a>&lt;F&gt;(&amp;mut self, visit: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"petgraph/graph/struct.Frozen.html\" title=\"struct petgraph::graph::Frozen\">Frozen</a>&lt;'_, Self&gt;, <a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Keep all nodes that return <code>true</code> from the <code>visit</code> closure,\nremove the others.</p>\n<p><code>visit</code> is provided a proxy reference to the graph, so that\nthe graph can be walked and associated data modified.</p>\n<p>The order nodes are visited is not specified.</p>\n<p>The node indices of the removed nodes are invalidated, but none other.\nEdge indices are invalidated as they would be following the removal of\neach edge with an endpoint in a removed node.</p>\n<p>Computes in <strong>O(n + e’)</strong> time, where <strong>n</strong> is the number of node indices and\n<strong>e’</strong> is the number of affected edges, including <em>n</em> calls to <code>.remove_edge()</code>\nwhere <em>n</em> is the number of edges with an endpoint in a removed node.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain_edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#887-898\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.retain_edges\" class=\"fn\">retain_edges</a>&lt;F&gt;(&amp;mut self, visit: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"petgraph/graph/struct.Frozen.html\" title=\"struct petgraph::graph::Frozen\">Frozen</a>&lt;'_, Self&gt;, <a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Keep all edges that return <code>true</code> from the <code>visit</code> closure,\nremove the others.</p>\n<p><code>visit</code> is provided a proxy reference to the graph, so that\nthe graph can be walked and associated data modified.</p>\n<p>The order edges are visited is not specified.</p>\n<p>The edge indices of the removed edes are invalidated, but none other.</p>\n<p>Computes in <strong>O(e’‘)</strong> time, <strong>e’</strong> is the number of affected edges,\nincluding the calls to <code>.remove_edge()</code> for each removed edge.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#917-927\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.from_edges\" class=\"fn\">from_edges</a>&lt;I&gt;(iterable: I) -&gt; Self<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>,\n    I::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a>: <a class=\"trait\" href=\"petgraph/trait.IntoWeightedEdge.html\" title=\"trait petgraph::IntoWeightedEdge\">IntoWeightedEdge</a>&lt;E&gt;,\n    &lt;I::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a> as <a class=\"trait\" href=\"petgraph/trait.IntoWeightedEdge.html\" title=\"trait petgraph::IntoWeightedEdge\">IntoWeightedEdge</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"petgraph/trait.IntoWeightedEdge.html#associatedtype.NodeId\" title=\"type petgraph::IntoWeightedEdge::NodeId\">NodeId</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;&gt;,\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a new <code>StableGraph</code> from an iterable of edges.</p>\n<p>Node weights <code>N</code> are set to default values.\nEdge weights <code>E</code> may either be specified in the list,\nor they are filled with default values.</p>\n<p>Nodes are inserted automatically to match the edges.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>petgraph::stable_graph::StableGraph;\n\n<span class=\"kw\">let </span>gr = StableGraph::&lt;(), i32&gt;::from_edges(<span class=\"kw-2\">&amp;</span>[\n    (<span class=\"number\">0</span>, <span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">2</span>), (<span class=\"number\">0</span>, <span class=\"number\">3</span>),\n    (<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"number\">3</span>),\n    (<span class=\"number\">2</span>, <span class=\"number\">3</span>),\n]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#934-954\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.map\" class=\"fn\">map</a>&lt;'a, F, G, N2, E2&gt;(\n    &amp;'a self,\n    node_map: F,\n    edge_map: G,\n) -&gt; <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N2, E2, Ty, Ix&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;'a N</a>) -&gt; N2,\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;'a E</a>) -&gt; E2,</div></h4></section></summary><div class=\"docblock\"><p>Create a new <code>StableGraph</code> by mapping node and\nedge weights to new values.</p>\n<p>The resulting graph has the same structure and the same\ngraph indices as <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.filter_map\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#967-1018\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.filter_map\" class=\"fn\">filter_map</a>&lt;'a, F, G, N2, E2&gt;(\n    &amp;'a self,\n    node_map: F,\n    edge_map: G,\n) -&gt; <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N2, E2, Ty, Ix&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;'a N</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;N2&gt;,\n    G: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"petgraph/graph/struct.EdgeIndex.html\" title=\"struct petgraph::graph::EdgeIndex\">EdgeIndex</a>&lt;Ix&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.reference.html\">&amp;'a E</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;E2&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a new <code>StableGraph</code> by mapping nodes and edges.\nA node or edge may be mapped to <code>None</code> to exclude it from\nthe resulting graph.</p>\n<p>Nodes are mapped first with the <code>node_map</code> closure, then\n<code>edge_map</code> is called for the edges that have not had any endpoint\nremoved.</p>\n<p>The resulting graph has the structure of a subgraph of the original graph.\nNodes and edges that are not removed maintain their old node or edge\nindices.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_with_edges\" class=\"method\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1027-1043\">Source</a><h4 class=\"code-header\">pub fn <a href=\"petgraph/stable_graph/struct.StableGraph.html#tymethod.extend_with_edges\" class=\"fn\">extend_with_edges</a>&lt;I&gt;(&amp;mut self, iterable: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>,\n    I::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a>: <a class=\"trait\" href=\"petgraph/trait.IntoWeightedEdge.html\" title=\"trait petgraph::IntoWeightedEdge\">IntoWeightedEdge</a>&lt;E&gt;,\n    &lt;I::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.87.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" title=\"type core::iter::traits::collect::IntoIterator::Item\">Item</a> as <a class=\"trait\" href=\"petgraph/trait.IntoWeightedEdge.html\" title=\"trait petgraph::IntoWeightedEdge\">IntoWeightedEdge</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"petgraph/trait.IntoWeightedEdge.html#associatedtype.NodeId\" title=\"type petgraph::IntoWeightedEdge::NodeId\">NodeId</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"petgraph/graph/struct.NodeIndex.html\" title=\"struct petgraph::graph::NodeIndex\">NodeIndex</a>&lt;Ix&gt;&gt;,\n    N: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h4></section></summary><div class=\"docblock\"><p>Extend the graph from an iterable of edges.</p>\n<p>Node weights <code>N</code> are set to default values.\nEdge weights <code>E</code> may either be specified in the list,\nor they are filled with default values.</p>\n<p>Nodes are inserted automatically to match the edges.</p>\n</div></details></div></details>",0,"petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToGraph6-for-StableGraph%3CN,+E,+Undirected,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph6/graph6_encoder.rs.html#131-135\">Source</a><a href=\"#impl-ToGraph6-for-StableGraph%3CN,+E,+Undirected,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>&gt; <a class=\"trait\" href=\"petgraph/graph6/trait.ToGraph6.html\" title=\"trait petgraph::graph6::ToGraph6\">ToGraph6</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, <a class=\"enum\" href=\"petgraph/enum.Undirected.html\" title=\"enum petgraph::Undirected\">Undirected</a>, Ix&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.graph6_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph6/graph6_encoder.rs.html#132-134\">Source</a><a href=\"#method.graph6_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/graph6/trait.ToGraph6.html#tymethod.graph6_string\" class=\"fn\">graph6_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.87.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></div></details>","ToGraph6","petgraph::graph_impl::stable_graph::StableUnGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Visitable-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1849-1862\">Source</a><a href=\"#impl-Visitable-for-StableGraph%3CN,+E,+Ty,+Ix%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;N, E, Ty, Ix&gt; <a class=\"trait\" href=\"petgraph/visit/trait.Visitable.html\" title=\"trait petgraph::visit::Visitable\">Visitable</a> for <a class=\"struct\" href=\"petgraph/stable_graph/struct.StableGraph.html\" title=\"struct petgraph::stable_graph::StableGraph\">StableGraph</a>&lt;N, E, Ty, Ix&gt;<div class=\"where\">where\n    Ty: <a class=\"trait\" href=\"petgraph/trait.EdgeType.html\" title=\"trait petgraph::EdgeType\">EdgeType</a>,\n    Ix: <a class=\"trait\" href=\"petgraph/graph/trait.IndexType.html\" title=\"trait petgraph::graph::IndexType\">IndexType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Map\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1854\">Source</a><a href=\"#associatedtype.Map\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"petgraph/visit/trait.Visitable.html#associatedtype.Map\" class=\"associatedtype\">Map</a> = <a class=\"struct\" href=\"fixedbitset/struct.FixedBitSet.html\" title=\"struct fixedbitset::FixedBitSet\">FixedBitSet</a></h4></section></summary><div class='docblock'>The associated map type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.visit_map\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1855-1857\">Source</a><a href=\"#method.visit_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.Visitable.html#tymethod.visit_map\" class=\"fn\">visit_map</a>(&amp;self) -&gt; <a class=\"struct\" href=\"fixedbitset/struct.FixedBitSet.html\" title=\"struct fixedbitset::FixedBitSet\">FixedBitSet</a></h4></section></summary><div class='docblock'>Create a new visitor map</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reset_map\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/petgraph/graph_impl/stable_graph/mod.rs.html#1858-1861\">Source</a><a href=\"#method.reset_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"petgraph/visit/trait.Visitable.html#tymethod.reset_map\" class=\"fn\">reset_map</a>(&amp;self, map: &amp;mut Self::<a class=\"associatedtype\" href=\"petgraph/visit/trait.Visitable.html#associatedtype.Map\" title=\"type petgraph::visit::Visitable::Map\">Map</a>)</h4></section></summary><div class='docblock'>Reset the visitor map (and resize to new size of graph if needed)</div></details></div></details>","Visitable","petgraph::graph_impl::stable_graph::StableDiGraph","petgraph::graph_impl::stable_graph::StableUnGraph"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[118508]}