(function() {var type_impls = {
"shadow_shim_helper_rs":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ThreadShmem\" class=\"impl\"><a class=\"src rightside\" href=\"src/shadow_shim_helper_rs/shim_shmem.rs.html#290-322\">source</a><a href=\"#impl-ThreadShmem\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"shadow_shim_helper_rs/shim_shmem/struct.ThreadShmem.html\" title=\"struct shadow_shim_helper_rs::shim_shmem::ThreadShmem\">ThreadShmem</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/shadow_shim_helper_rs/shim_shmem.rs.html#291-311\">source</a><h4 class=\"code-header\">pub fn <a href=\"shadow_shim_helper_rs/shim_shmem/struct.ThreadShmem.html#tymethod.new\" class=\"fn\">new</a>(host: &amp;<a class=\"struct\" href=\"shadow_shim_helper_rs/shim_shmem/struct.HostShmemProtected.html\" title=\"struct shadow_shim_helper_rs::shim_shmem::HostShmemProtected\">HostShmemProtected</a>, tid: <a class=\"type\" href=\"libc/unix/type.pid_t.html\" title=\"type libc::unix::pid_t\">pid_t</a>) -&gt; Self</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method\"><a class=\"src rightside\" href=\"src/shadow_shim_helper_rs/shim_shmem.rs.html#315-321\">source</a><h4 class=\"code-header\">pub fn <a href=\"shadow_shim_helper_rs/shim_shmem/struct.ThreadShmem.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self, root: &amp;<a class=\"struct\" href=\"shadow_shim_helper_rs/rootedcell/struct.Root.html\" title=\"struct shadow_shim_helper_rs::rootedcell::Root\">Root</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a copy of <code>Self</code>. We can’t implement the <code>Clone</code> trait since we\nneed the <code>root</code>.</p>\n</div></details></div></details>",0,"shadow_shim_helper_rs::shim_shmem::export::ShimShmemThread"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VirtualAddressSpaceIndependent-for-ThreadShmem\" class=\"impl\"><a class=\"src rightside\" href=\"src/shadow_shim_helper_rs/shim_shmem.rs.html#280\">source</a><a href=\"#impl-VirtualAddressSpaceIndependent-for-ThreadShmem\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"vasi/trait.VirtualAddressSpaceIndependent.html\" title=\"trait vasi::VirtualAddressSpaceIndependent\">VirtualAddressSpaceIndependent</a> for <a class=\"struct\" href=\"shadow_shim_helper_rs/shim_shmem/struct.ThreadShmem.html\" title=\"struct shadow_shim_helper_rs::shim_shmem::ThreadShmem\">ThreadShmem</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.IGNORE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/shadow_shim_helper_rs/shim_shmem.rs.html#280\">source</a><a href=\"#associatedconstant.IGNORE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"vasi/trait.VirtualAddressSpaceIndependent.html#associatedconstant.IGNORE\" class=\"constant\">IGNORE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a> = _</h4></section></summary><div class='docblock'>Used by the derive macro to validate that fields are Vasi.</div></details></div></details>","VirtualAddressSpaceIndependent","shadow_shim_helper_rs::shim_shmem::export::ShimShmemThread"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()