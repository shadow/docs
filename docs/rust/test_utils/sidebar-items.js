initSidebarItems({"enum":[["TestEnvironment",""]],"fn":[["assert_true_else_errno","Assert the boolean condition is true, else print the last system error"],["check_system_call","Run the given function, check that the errno was expected, and return the functionâ€™s return value."],["get_errno","Get the current errno."],["get_errno_message","Get the message for the given errno."],["is_readable","Returns `true` if the `POLLIN` flag is set."],["is_writable","Returns `true` if the `POLLOUT` flag is set."],["poll_status","Returns the poll event flags (the result of `poll()` with `PollFlags::all()` flags set). The flags will be empty if the timeout occurred."],["result_assert","Return the error message if the condition is false."],["result_assert_eq","Return a formatted error message if `a` and `b` are unequal."],["result_assert_ne","Return a formatted error message if `a` and `b` are equal."],["run_and_close_fds","Run the function and then close any given file descriptors, even if there was an error."],["run_tests","Runs provided tests until failure and outputs results to stdout."],["running_in_shadow",""],["running_in_shadow_ptrace",""]],"macro":[["check_system_call","Calls check_system_call(), but automatically passes the current line number."],["ensure_ord","Convenience wrapper around `anyhow::ensure` that generates useful error messages."],["set","Similar to the `vec!` macro, `set!` will create a `HashSet` with the given elements."]],"mod":[["socket_utils",""]],"struct":[["ShadowTest",""]],"trait":[["AsMutPtr","An object that can be converted to a mutable pointer (possibly null)."],["AsPtr","An object that can be converted to a pointer (possibly null)."]]});